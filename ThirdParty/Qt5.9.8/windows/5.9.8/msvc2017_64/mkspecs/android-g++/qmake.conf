# qmake configuration for building with android-g++
MAKEFILE_GENERATOR      = UNIX
QMAKE_PLATFORM          = android
QMAKE_COMPILER          = gcc

CONFIG                 += android_install unversioned_soname unversioned_libname plugin_with_soname android_deployment_settings

include(../common/linux.conf)
include(../common/gcc-base-unix.conf)
include(../common/android-base-head.conf)

QMAKE_CC                = $${CROSS_COMPILE}gcc
QMAKE_CXX               = $${CROSS_COMPILE}g++
QMAKE_LINK              = $$QMAKE_CXX

ANDROID_SOURCES_CXX_STL_LIBDIR = $$NDK_ROOT/sources/cxx-stl/gnu-libstdc++/$$NDK_TOOLCHAIN_VERSION/libs/$$ANDROID_TARGET_ARCH
ANDROID_STDCPP_PATH            = $$ANDROID_SOURCES_CXX_STL_LIBDIR/libgnustl_shared.so
ANDROID_CXX_STL_LIBS           = -lgnustl_shared -lgcc

exists($$NDK_ROOT/sysroot/usr/include): \
        QMAKE_CFLAGS += --sysroot=$$NDK_ROOT/sysroot \
                        -isystem $$NDK_ROOT/sysroot/usr/include/$$NDK_TOOLS_PREFIX
else:   QMAKE_CFLAGS += --sysroot=$$ANDROID_PLATFORM_ROOT_PATH

QMAKE_CFLAGS += -isystem $$NDK_ROOT/sources/cxx-stl/gnu-libstdc++/$$NDK_TOOLCHAIN_VERSION/include \
                -isystem $$ANDROID_SOURCES_CXX_STL_LIBDIR/include

equals(ANDROID_TARGET_ARCH, armeabi)|equals(ANDROID_TARGET_ARCH, armeabi-v7a): \
    LIBGCC_PATH_FULL = $$system("$$QMAKE_CXX -mthumb-interwork -print-libgcc-file-name")
else: \
    LIBGCC_PATH_FULL = $$system("$$QMAKE_CXX -print-libgcc-file-name")
ANDROID_SOURCES_CXX_STL_LIBDIR += $$dirname(LIBGCC_PATH_FULL)

QMAKE_ARM_CFLAGS_RELEASE                   = -Os
QMAKE_ARM_CFLAGS_RELEASE_WITH_DEBUGINFO    = -g -Os

include(../common/android-base-tail.conf)
