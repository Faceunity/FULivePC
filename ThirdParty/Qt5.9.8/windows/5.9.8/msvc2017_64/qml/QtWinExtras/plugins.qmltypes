import QtQuick.tooling 1.2

// This file describes the plugin-supplied types contained in the library.
// It is used for QML tooling purposes only.
//
// This file was auto-generated by:
// 'qmlplugindump -nonrelocatable QtWinExtras 1.0'

Module {
    dependencies: []
    Component {
        name: "QQuickDwmFeatures"
        defaultProperty: "data"
        prototype: "QQuickItem"
        exports: ["QtWinExtras/DwmFeatures 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "compositionEnabled"; type: "bool" }
        Property { name: "colorizationColor"; type: "QColor"; isReadonly: true }
        Property { name: "realColorizationColor"; type: "QColor"; isReadonly: true }
        Property { name: "colorizationOpaqueBlend"; type: "bool"; isReadonly: true }
        Property { name: "topGlassMargin"; type: "int" }
        Property { name: "rightGlassMargin"; type: "int" }
        Property { name: "bottomGlassMargin"; type: "int" }
        Property { name: "leftGlassMargin"; type: "int" }
        Property { name: "blurBehindEnabled"; type: "bool" }
        Property { name: "excludedFromPeek"; type: "bool" }
        Property { name: "peekDisallowed"; type: "bool" }
        Property { name: "flip3DPolicy"; type: "QQuickWin::WindowFlip3DPolicy" }
    }
    Component {
        name: "QQuickItem"
        defaultProperty: "data"
        prototype: "QObject"
        Enum {
            name: "TransformOrigin"
            values: {
                "TopLeft": 0,
                "Top": 1,
                "TopRight": 2,
                "Left": 3,
                "Center": 4,
                "Right": 5,
                "BottomLeft": 6,
                "Bottom": 7,
                "BottomRight": 8
            }
        }
        Property { name: "parent"; type: "QQuickItem"; isPointer: true }
        Property { name: "data"; type: "QObject"; isList: true; isReadonly: true }
        Property { name: "resources"; type: "QObject"; isList: true; isReadonly: true }
        Property { name: "children"; type: "QQuickItem"; isList: true; isReadonly: true }
        Property { name: "x"; type: "double" }
        Property { name: "y"; type: "double" }
        Property { name: "z"; type: "double" }
        Property { name: "width"; type: "double" }
        Property { name: "height"; type: "double" }
        Property { name: "opacity"; type: "double" }
        Property { name: "enabled"; type: "bool" }
        Property { name: "visible"; type: "bool" }
        Property { name: "visibleChildren"; type: "QQuickItem"; isList: true; isReadonly: true }
        Property { name: "states"; type: "QQuickState"; isList: true; isReadonly: true }
        Property { name: "transitions"; type: "QQuickTransition"; isList: true; isReadonly: true }
        Property { name: "state"; type: "string" }
        Property { name: "childrenRect"; type: "QRectF"; isReadonly: true }
        Property { name: "anchors"; type: "QQuickAnchors"; isReadonly: true; isPointer: true }
        Property { name: "left"; type: "QQuickAnchorLine"; isReadonly: true }
        Property { name: "right"; type: "QQuickAnchorLine"; isReadonly: true }
        Property { name: "horizontalCenter"; type: "QQuickAnchorLine"; isReadonly: true }
        Property { name: "top"; type: "QQuickAnchorLine"; isReadonly: true }
        Property { name: "bottom"; type: "QQuickAnchorLine"; isReadonly: true }
        Property { name: "verticalCenter"; type: "QQuickAnchorLine"; isReadonly: true }
        Property { name: "baseline"; type: "QQuickAnchorLine"; isReadonly: true }
        Property { name: "baselineOffset"; type: "double" }
        Property { name: "clip"; type: "bool" }
        Property { name: "focus"; type: "bool" }
        Property { name: "activeFocus"; type: "bool"; isReadonly: true }
        Property { name: "activeFocusOnTab"; revision: 1; type: "bool" }
        Property { name: "rotation"; type: "double" }
        Property { name: "scale"; type: "double" }
        Property { name: "transformOrigin"; type: "TransformOrigin" }
        Property { name: "transformOriginPoint"; type: "QPointF"; isReadonly: true }
        Property { name: "transform"; type: "QQuickTransform"; isList: true; isReadonly: true }
        Property { name: "smooth"; type: "bool" }
        Property { name: "antialiasing"; type: "bool" }
        Property { name: "implicitWidth"; type: "double" }
        Property { name: "implicitHeight"; type: "double" }
        Property { name: "layer"; type: "QQuickItemLayer"; isReadonly: true; isPointer: true }
        Signal {
            name: "childrenRectChanged"
            Parameter { type: "QRectF" }
        }
        Signal {
            name: "baselineOffsetChanged"
            Parameter { type: "double" }
        }
        Signal {
            name: "stateChanged"
            Parameter { type: "string" }
        }
        Signal {
            name: "focusChanged"
            Parameter { type: "bool" }
        }
        Signal {
            name: "activeFocusChanged"
            Parameter { type: "bool" }
        }
        Signal {
            name: "activeFocusOnTabChanged"
            revision: 1
            Parameter { type: "bool" }
        }
        Signal {
            name: "parentChanged"
            Parameter { type: "QQuickItem"; isPointer: true }
        }
        Signal {
            name: "transformOriginChanged"
            Parameter { type: "TransformOrigin" }
        }
        Signal {
            name: "smoothChanged"
            Parameter { type: "bool" }
        }
        Signal {
            name: "antialiasingChanged"
            Parameter { type: "bool" }
        }
        Signal {
            name: "clipChanged"
            Parameter { type: "bool" }
        }
        Signal {
            name: "windowChanged"
            revision: 1
            Parameter { name: "window"; type: "QQuickWindow"; isPointer: true }
        }
        Method { name: "update" }
        Method {
            name: "grabToImage"
            revision: 2
            type: "bool"
            Parameter { name: "callback"; type: "QJSValue" }
            Parameter { name: "targetSize"; type: "QSize" }
        }
        Method {
            name: "grabToImage"
            revision: 2
            type: "bool"
            Parameter { name: "callback"; type: "QJSValue" }
        }
        Method {
            name: "contains"
            type: "bool"
            Parameter { name: "point"; type: "QPointF" }
        }
        Method {
            name: "mapFromItem"
            Parameter { type: "QQmlV4Function"; isPointer: true }
        }
        Method {
            name: "mapToItem"
            Parameter { type: "QQmlV4Function"; isPointer: true }
        }
        Method { name: "forceActiveFocus" }
        Method {
            name: "forceActiveFocus"
            Parameter { name: "reason"; type: "Qt::FocusReason" }
        }
        Method {
            name: "nextItemInFocusChain"
            revision: 1
            type: "QQuickItem*"
            Parameter { name: "forward"; type: "bool" }
        }
        Method { name: "nextItemInFocusChain"; revision: 1; type: "QQuickItem*" }
        Method {
            name: "childAt"
            type: "QQuickItem*"
            Parameter { name: "x"; type: "double" }
            Parameter { name: "y"; type: "double" }
        }
    }
    Component {
        name: "QQuickJumpList"
        defaultProperty: "data"
        prototype: "QObject"
        exports: ["QtWinExtras/JumpList 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "recent"; type: "QQuickJumpListCategory"; isReadonly: true; isPointer: true }
        Property { name: "frequent"; type: "QQuickJumpListCategory"; isReadonly: true; isPointer: true }
        Property { name: "tasks"; type: "QQuickJumpListCategory"; isPointer: true }
        Property { name: "categories"; type: "QQuickJumpListCategory"; isList: true; isReadonly: true }
        Property { name: "data"; type: "QObject"; isList: true; isReadonly: true }
    }
    Component {
        name: "QQuickJumpListCategory"
        defaultProperty: "data"
        prototype: "QObject"
        exports: ["QtWinExtras/JumpListCategory 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "data"; type: "QObject"; isList: true; isReadonly: true }
        Property { name: "items"; type: "QQuickJumpListItem"; isList: true; isReadonly: true }
        Property { name: "title"; type: "string" }
        Property { name: "visible"; type: "bool" }
        Signal { name: "visibilityChanged" }
    }
    Component {
        name: "QQuickJumpListItem"
        prototype: "QObject"
        exports: ["QtWinExtras/JumpListItem 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "JumpListItemType"
            values: {
                "ItemTypeLink": 1,
                "ItemTypeDestination": 2,
                "ItemTypeSeparator": 3
            }
        }
        Property { name: "__jumpListItemType"; type: "int" }
    }
    Component {
        name: "QQuickTaskbarButton"
        defaultProperty: "data"
        prototype: "QQuickItem"
        exports: ["QtWinExtras/TaskbarButton 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "overlay"; type: "QQuickTaskbarOverlay"; isReadonly: true; isPointer: true }
        Property { name: "progress"; type: "QWinTaskbarProgress"; isReadonly: true; isPointer: true }
    }
    Component {
        name: "QQuickTaskbarOverlay"
        prototype: "QObject"
        exports: ["QtWinExtras/TaskbarOverlay 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "iconSource"; type: "QUrl" }
        Property { name: "accessibleDescription"; type: "string" }
    }
    Component {
        name: "QQuickThumbnailToolBar"
        defaultProperty: "data"
        prototype: "QQuickItem"
        exports: ["QtWinExtras/ThumbnailToolBar 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "count"; type: "int"; isReadonly: true }
        Property { name: "data"; type: "QObject"; isList: true; isReadonly: true }
        Property { name: "buttons"; type: "QQuickThumbnailToolButton"; isList: true; isReadonly: true }
        Property { name: "iconicNotificationsEnabled"; type: "bool" }
        Property { name: "iconicThumbnailSource"; type: "QUrl" }
        Property { name: "iconicLivePreviewSource"; type: "QUrl" }
        Signal { name: "iconicThumbnailRequested" }
        Signal { name: "iconicLivePreviewRequested" }
        Method { name: "clear" }
        Method {
            name: "addButton"
            Parameter { name: "button"; type: "QQuickThumbnailToolButton"; isPointer: true }
        }
        Method {
            name: "removeButton"
            Parameter { name: "button"; type: "QQuickThumbnailToolButton"; isPointer: true }
        }
    }
    Component {
        name: "QQuickThumbnailToolButton"
        prototype: "QObject"
        exports: ["QtWinExtras/ThumbnailToolButton 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "iconSource"; type: "QUrl" }
        Property { name: "tooltip"; type: "string" }
        Property { name: "enabled"; type: "bool" }
        Property { name: "interactive"; type: "bool" }
        Property { name: "visible"; type: "bool" }
        Property { name: "dismissOnClick"; type: "bool" }
        Property { name: "flat"; type: "bool" }
        Signal { name: "clicked" }
    }
    Component {
        name: "QQuickWin"
        prototype: "QObject"
        exports: ["QtWinExtras/QtWin 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Enum {
            name: "HBitmapFormat"
            values: {
                "HBitmapNoAlpha": 0,
                "HBitmapPremultipliedAlpha": 1,
                "HBitmapAlpha": 2
            }
        }
        Enum {
            name: "WindowFlip3DPolicy"
            values: {
                "FlipDefault": 0,
                "FlipExcludeBelow": 1,
                "FlipExcludeAbove": 2
            }
        }
    }
    Component {
        name: "QWinTaskbarProgress"
        prototype: "QObject"
        exports: ["QtWinExtras/TaskbarProgress 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "value"; type: "int" }
        Property { name: "minimum"; type: "int" }
        Property { name: "maximum"; type: "int" }
        Property { name: "visible"; type: "bool" }
        Property { name: "paused"; type: "bool" }
        Property { name: "stopped"; type: "bool"; isReadonly: true }
        Signal {
            name: "valueChanged"
            Parameter { name: "value"; type: "int" }
        }
        Signal {
            name: "minimumChanged"
            Parameter { name: "minimum"; type: "int" }
        }
        Signal {
            name: "maximumChanged"
            Parameter { name: "maximum"; type: "int" }
        }
        Signal {
            name: "visibilityChanged"
            Parameter { name: "visible"; type: "bool" }
        }
        Signal {
            name: "pausedChanged"
            Parameter { name: "paused"; type: "bool" }
        }
        Signal {
            name: "stoppedChanged"
            Parameter { name: "stopped"; type: "bool" }
        }
        Method {
            name: "setValue"
            Parameter { name: "value"; type: "int" }
        }
        Method {
            name: "setMinimum"
            Parameter { name: "minimum"; type: "int" }
        }
        Method {
            name: "setMaximum"
            Parameter { name: "maximum"; type: "int" }
        }
        Method {
            name: "setRange"
            Parameter { name: "minimum"; type: "int" }
            Parameter { name: "maximum"; type: "int" }
        }
        Method { name: "reset" }
        Method { name: "show" }
        Method { name: "hide" }
        Method {
            name: "setVisible"
            Parameter { name: "visible"; type: "bool" }
        }
        Method { name: "pause" }
        Method { name: "resume" }
        Method {
            name: "setPaused"
            Parameter { name: "paused"; type: "bool" }
        }
        Method { name: "stop" }
    }
}
