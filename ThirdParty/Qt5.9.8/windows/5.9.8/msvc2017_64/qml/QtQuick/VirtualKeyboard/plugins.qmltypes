import QtQuick.tooling 1.2

// This file describes the plugin-supplied types contained in the library.
// It is used for QML tooling purposes only.
//
// This file was auto-generated by:
// 'qmlplugindump -defaultplatform -nonrelocatable QtQuick.VirtualKeyboard 2.1'

Module {
    dependencies: [
        "Qt.labs.folderlistmodel 2.1",
        "QtQuick.Layouts 1.1",
        "QtQuick.VirtualKeyboard.Styles 1.1"
    ]
    Component {
        prototype: "QQuickItem"
        name: "QtQuick.VirtualKeyboard/AlternativeKeys 2.0"
        exports: ["QtQuick.VirtualKeyboard/AlternativeKeys 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "active"; type: "bool" }
        Property { name: "highlightIndex"; type: "int" }
        Property { name: "keyCode"; type: "int" }
        Property { name: "origin"; type: "QPointF" }
        Property { name: "uppercased"; type: "bool" }
        Property { name: "listView"; type: "QQuickListView"; isReadonly: true; isPointer: true }
        Signal { name: "clicked" }
        Method {
            name: "open"
            type: "QVariant"
            Parameter { name: "key"; type: "QVariant" }
            Parameter { name: "originX"; type: "QVariant" }
            Parameter { name: "originY"; type: "QVariant" }
        }
        Method {
            name: "move"
            type: "QVariant"
            Parameter { name: "mouseX"; type: "QVariant" }
        }
        Method { name: "close"; type: "QVariant" }
    }
    Component {
        prototype: "QQuickItem"
        name: "QtQuick.VirtualKeyboard/AlternativeKeys 1.0"
        exports: ["QtQuick.VirtualKeyboard/AlternativeKeys 1.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "active"; type: "bool" }
        Property { name: "highlightIndex"; type: "int" }
        Property { name: "keyCode"; type: "int" }
        Property { name: "origin"; type: "QPointF" }
        Property { name: "uppercased"; type: "bool" }
        Property { name: "listView"; type: "QQuickListView"; isReadonly: true; isPointer: true }
        Signal { name: "clicked" }
        Method {
            name: "open"
            type: "QVariant"
            Parameter { name: "key"; type: "QVariant" }
            Parameter { name: "originX"; type: "QVariant" }
            Parameter { name: "originY"; type: "QVariant" }
        }
        Method {
            name: "move"
            type: "QVariant"
            Parameter { name: "mouseX"; type: "QVariant" }
        }
        Method { name: "close"; type: "QVariant" }
    }
    Component {
        prototype: "QQuickItem"
        name: "QtQuick.VirtualKeyboard/BackspaceKey 1.0"
        exports: ["QtQuick.VirtualKeyboard/BackspaceKey 1.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "weight"; type: "double" }
        Property { name: "text"; type: "string" }
        Property { name: "displayText"; type: "string" }
        Property { name: "smallText"; type: "string" }
        Property { name: "smallTextVisible"; type: "bool" }
        Property { name: "alternativeKeys"; type: "QVariant" }
        Property { name: "effectiveAlternativeKeys"; type: "QVariant"; isReadonly: true }
        Property { name: "effectiveAlternativeKeysHighlightIndex"; type: "int"; isReadonly: true }
        Property { name: "key"; type: "int" }
        Property { name: "noKeyEvent"; type: "bool" }
        Property { name: "active"; type: "bool" }
        Property { name: "noModifier"; type: "bool" }
        Property { name: "repeat"; type: "bool" }
        Property { name: "highlighted"; type: "bool" }
        Property { name: "functionKey"; type: "bool" }
        Property { name: "showPreview"; type: "bool" }
        Property { name: "enabled"; type: "bool" }
        Property { name: "pressed"; type: "bool" }
        Property { name: "uppercased"; type: "bool" }
        Property { name: "soundEffect"; type: "QUrl"; isReadonly: true }
        Property { name: "keyPanelDelegate"; type: "QQmlComponent"; isPointer: true }
        Signal { name: "clicked" }
    }
    Component {
        prototype: "QQuickItem"
        name: "QtQuick.VirtualKeyboard/BackspaceKey 2.0"
        exports: ["QtQuick.VirtualKeyboard/BackspaceKey 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "weight"; type: "double" }
        Property { name: "text"; type: "string" }
        Property { name: "displayText"; type: "string" }
        Property { name: "smallText"; type: "string" }
        Property { name: "smallTextVisible"; type: "bool" }
        Property { name: "alternativeKeys"; type: "QVariant" }
        Property { name: "effectiveAlternativeKeys"; type: "QVariant"; isReadonly: true }
        Property { name: "effectiveAlternativeKeysHighlightIndex"; type: "int"; isReadonly: true }
        Property { name: "key"; type: "int" }
        Property { name: "noKeyEvent"; type: "bool" }
        Property { name: "active"; type: "bool" }
        Property { name: "noModifier"; type: "bool" }
        Property { name: "repeat"; type: "bool" }
        Property { name: "highlighted"; type: "bool" }
        Property { name: "functionKey"; type: "bool" }
        Property { name: "showPreview"; type: "bool" }
        Property { name: "enabled"; type: "bool" }
        Property { name: "pressed"; type: "bool" }
        Property { name: "uppercased"; type: "bool" }
        Property { name: "soundEffect"; type: "QUrl"; isReadonly: true }
        Property { name: "keyPanelDelegate"; type: "QQmlComponent"; isPointer: true }
        Signal { name: "clicked" }
    }
    Component {
        prototype: "QQuickItem"
        name: "QtQuick.VirtualKeyboard/BaseKey 1.0"
        exports: ["QtQuick.VirtualKeyboard/BaseKey 1.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "weight"; type: "double" }
        Property { name: "text"; type: "string" }
        Property { name: "displayText"; type: "string" }
        Property { name: "smallText"; type: "string" }
        Property { name: "smallTextVisible"; type: "bool" }
        Property { name: "alternativeKeys"; type: "QVariant" }
        Property { name: "effectiveAlternativeKeys"; type: "QVariant"; isReadonly: true }
        Property { name: "effectiveAlternativeKeysHighlightIndex"; type: "int"; isReadonly: true }
        Property { name: "key"; type: "int" }
        Property { name: "noKeyEvent"; type: "bool" }
        Property { name: "active"; type: "bool" }
        Property { name: "noModifier"; type: "bool" }
        Property { name: "repeat"; type: "bool" }
        Property { name: "highlighted"; type: "bool" }
        Property { name: "functionKey"; type: "bool" }
        Property { name: "showPreview"; type: "bool" }
        Property { name: "enabled"; type: "bool" }
        Property { name: "pressed"; type: "bool" }
        Property { name: "uppercased"; type: "bool" }
        Property { name: "soundEffect"; type: "QUrl"; isReadonly: true }
        Property { name: "keyPanelDelegate"; type: "QQmlComponent"; isPointer: true }
        Signal { name: "clicked" }
    }
    Component {
        prototype: "QQuickItem"
        name: "QtQuick.VirtualKeyboard/BaseKey 2.0"
        exports: ["QtQuick.VirtualKeyboard/BaseKey 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "weight"; type: "double" }
        Property { name: "text"; type: "string" }
        Property { name: "displayText"; type: "string" }
        Property { name: "smallText"; type: "string" }
        Property { name: "smallTextVisible"; type: "bool" }
        Property { name: "alternativeKeys"; type: "QVariant" }
        Property { name: "effectiveAlternativeKeys"; type: "QVariant"; isReadonly: true }
        Property { name: "effectiveAlternativeKeysHighlightIndex"; type: "int"; isReadonly: true }
        Property { name: "key"; type: "int" }
        Property { name: "noKeyEvent"; type: "bool" }
        Property { name: "active"; type: "bool" }
        Property { name: "noModifier"; type: "bool" }
        Property { name: "repeat"; type: "bool" }
        Property { name: "highlighted"; type: "bool" }
        Property { name: "functionKey"; type: "bool" }
        Property { name: "showPreview"; type: "bool" }
        Property { name: "enabled"; type: "bool" }
        Property { name: "pressed"; type: "bool" }
        Property { name: "uppercased"; type: "bool" }
        Property { name: "soundEffect"; type: "QUrl"; isReadonly: true }
        Property { name: "keyPanelDelegate"; type: "QQmlComponent"; isPointer: true }
        Signal { name: "clicked" }
    }
    Component {
        prototype: "QQuickItem"
        name: "QtQuick.VirtualKeyboard/ChangeLanguageKey 2.0"
        exports: ["QtQuick.VirtualKeyboard/ChangeLanguageKey 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "customLayoutsOnly"; type: "bool" }
        Property { name: "weight"; type: "double" }
        Property { name: "text"; type: "string" }
        Property { name: "displayText"; type: "string" }
        Property { name: "smallText"; type: "string" }
        Property { name: "smallTextVisible"; type: "bool" }
        Property { name: "alternativeKeys"; type: "QVariant" }
        Property { name: "effectiveAlternativeKeys"; type: "QVariant"; isReadonly: true }
        Property { name: "effectiveAlternativeKeysHighlightIndex"; type: "int"; isReadonly: true }
        Property { name: "key"; type: "int" }
        Property { name: "noKeyEvent"; type: "bool" }
        Property { name: "active"; type: "bool" }
        Property { name: "noModifier"; type: "bool" }
        Property { name: "repeat"; type: "bool" }
        Property { name: "highlighted"; type: "bool" }
        Property { name: "functionKey"; type: "bool" }
        Property { name: "showPreview"; type: "bool" }
        Property { name: "enabled"; type: "bool" }
        Property { name: "pressed"; type: "bool" }
        Property { name: "uppercased"; type: "bool" }
        Property { name: "soundEffect"; type: "QUrl"; isReadonly: true }
        Property { name: "keyPanelDelegate"; type: "QQmlComponent"; isPointer: true }
        Signal { name: "clicked" }
    }
    Component {
        prototype: "QQuickItem"
        name: "QtQuick.VirtualKeyboard/ChangeLanguageKey 1.0"
        exports: ["QtQuick.VirtualKeyboard/ChangeLanguageKey 1.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "customLayoutsOnly"; type: "bool" }
        Property { name: "weight"; type: "double" }
        Property { name: "text"; type: "string" }
        Property { name: "displayText"; type: "string" }
        Property { name: "smallText"; type: "string" }
        Property { name: "smallTextVisible"; type: "bool" }
        Property { name: "alternativeKeys"; type: "QVariant" }
        Property { name: "effectiveAlternativeKeys"; type: "QVariant"; isReadonly: true }
        Property { name: "effectiveAlternativeKeysHighlightIndex"; type: "int"; isReadonly: true }
        Property { name: "key"; type: "int" }
        Property { name: "noKeyEvent"; type: "bool" }
        Property { name: "active"; type: "bool" }
        Property { name: "noModifier"; type: "bool" }
        Property { name: "repeat"; type: "bool" }
        Property { name: "highlighted"; type: "bool" }
        Property { name: "functionKey"; type: "bool" }
        Property { name: "showPreview"; type: "bool" }
        Property { name: "enabled"; type: "bool" }
        Property { name: "pressed"; type: "bool" }
        Property { name: "uppercased"; type: "bool" }
        Property { name: "soundEffect"; type: "QUrl"; isReadonly: true }
        Property { name: "keyPanelDelegate"; type: "QQmlComponent"; isPointer: true }
        Signal { name: "clicked" }
    }
    Component {
        prototype: "QQuickItem"
        name: "QtQuick.VirtualKeyboard/CharacterPreviewBubble 1.0"
        exports: ["QtQuick.VirtualKeyboard/CharacterPreviewBubble 1.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "active"; type: "bool" }
        Property { name: "activeKey"; type: "QVariant" }
    }
    Component {
        prototype: "QQuickItem"
        name: "QtQuick.VirtualKeyboard/CharacterPreviewBubble 2.0"
        exports: ["QtQuick.VirtualKeyboard/CharacterPreviewBubble 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "active"; type: "bool" }
        Property { name: "activeKey"; type: "QVariant" }
    }
    Component {
        prototype: "QQuickItem"
        name: "QtQuick.VirtualKeyboard/EnterKey 2.0"
        exports: ["QtQuick.VirtualKeyboard/EnterKey 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "actionId"; type: "int"; isReadonly: true }
        Property { name: "weight"; type: "double" }
        Property { name: "text"; type: "string" }
        Property { name: "displayText"; type: "string" }
        Property { name: "smallText"; type: "string" }
        Property { name: "smallTextVisible"; type: "bool" }
        Property { name: "alternativeKeys"; type: "QVariant" }
        Property { name: "effectiveAlternativeKeys"; type: "QVariant"; isReadonly: true }
        Property { name: "effectiveAlternativeKeysHighlightIndex"; type: "int"; isReadonly: true }
        Property { name: "key"; type: "int" }
        Property { name: "noKeyEvent"; type: "bool" }
        Property { name: "active"; type: "bool" }
        Property { name: "noModifier"; type: "bool" }
        Property { name: "repeat"; type: "bool" }
        Property { name: "highlighted"; type: "bool" }
        Property { name: "functionKey"; type: "bool" }
        Property { name: "showPreview"; type: "bool" }
        Property { name: "enabled"; type: "bool" }
        Property { name: "pressed"; type: "bool" }
        Property { name: "uppercased"; type: "bool" }
        Property { name: "soundEffect"; type: "QUrl"; isReadonly: true }
        Property { name: "keyPanelDelegate"; type: "QQmlComponent"; isPointer: true }
        Signal { name: "clicked" }
    }
    Component {
        prototype: "QQuickItem"
        name: "QtQuick.VirtualKeyboard/EnterKey 1.0"
        exports: ["QtQuick.VirtualKeyboard/EnterKey 1.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "actionId"; type: "int"; isReadonly: true }
        Property { name: "weight"; type: "double" }
        Property { name: "text"; type: "string" }
        Property { name: "displayText"; type: "string" }
        Property { name: "smallText"; type: "string" }
        Property { name: "smallTextVisible"; type: "bool" }
        Property { name: "alternativeKeys"; type: "QVariant" }
        Property { name: "effectiveAlternativeKeys"; type: "QVariant"; isReadonly: true }
        Property { name: "effectiveAlternativeKeysHighlightIndex"; type: "int"; isReadonly: true }
        Property { name: "key"; type: "int" }
        Property { name: "noKeyEvent"; type: "bool" }
        Property { name: "active"; type: "bool" }
        Property { name: "noModifier"; type: "bool" }
        Property { name: "repeat"; type: "bool" }
        Property { name: "highlighted"; type: "bool" }
        Property { name: "functionKey"; type: "bool" }
        Property { name: "showPreview"; type: "bool" }
        Property { name: "enabled"; type: "bool" }
        Property { name: "pressed"; type: "bool" }
        Property { name: "uppercased"; type: "bool" }
        Property { name: "soundEffect"; type: "QUrl"; isReadonly: true }
        Property { name: "keyPanelDelegate"; type: "QQmlComponent"; isPointer: true }
        Signal { name: "clicked" }
    }
    Component {
        prototype: "QQuickItem"
        name: "QtQuick.VirtualKeyboard/FillerKey 2.0"
        exports: ["QtQuick.VirtualKeyboard/FillerKey 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "weight"; type: "double" }
        Property { name: "text"; type: "string" }
        Property { name: "displayText"; type: "string" }
        Property { name: "smallText"; type: "string" }
        Property { name: "smallTextVisible"; type: "bool" }
        Property { name: "alternativeKeys"; type: "QVariant" }
        Property { name: "effectiveAlternativeKeys"; type: "QVariant"; isReadonly: true }
        Property { name: "effectiveAlternativeKeysHighlightIndex"; type: "int"; isReadonly: true }
        Property { name: "key"; type: "int" }
        Property { name: "noKeyEvent"; type: "bool" }
        Property { name: "active"; type: "bool" }
        Property { name: "noModifier"; type: "bool" }
        Property { name: "repeat"; type: "bool" }
        Property { name: "highlighted"; type: "bool" }
        Property { name: "functionKey"; type: "bool" }
        Property { name: "showPreview"; type: "bool" }
        Property { name: "enabled"; type: "bool" }
        Property { name: "pressed"; type: "bool" }
        Property { name: "uppercased"; type: "bool" }
        Property { name: "soundEffect"; type: "QUrl"; isReadonly: true }
        Property { name: "keyPanelDelegate"; type: "QQmlComponent"; isPointer: true }
        Signal { name: "clicked" }
    }
    Component {
        prototype: "QQuickItem"
        name: "QtQuick.VirtualKeyboard/FillerKey 1.0"
        exports: ["QtQuick.VirtualKeyboard/FillerKey 1.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "weight"; type: "double" }
        Property { name: "text"; type: "string" }
        Property { name: "displayText"; type: "string" }
        Property { name: "smallText"; type: "string" }
        Property { name: "smallTextVisible"; type: "bool" }
        Property { name: "alternativeKeys"; type: "QVariant" }
        Property { name: "effectiveAlternativeKeys"; type: "QVariant"; isReadonly: true }
        Property { name: "effectiveAlternativeKeysHighlightIndex"; type: "int"; isReadonly: true }
        Property { name: "key"; type: "int" }
        Property { name: "noKeyEvent"; type: "bool" }
        Property { name: "active"; type: "bool" }
        Property { name: "noModifier"; type: "bool" }
        Property { name: "repeat"; type: "bool" }
        Property { name: "highlighted"; type: "bool" }
        Property { name: "functionKey"; type: "bool" }
        Property { name: "showPreview"; type: "bool" }
        Property { name: "enabled"; type: "bool" }
        Property { name: "pressed"; type: "bool" }
        Property { name: "uppercased"; type: "bool" }
        Property { name: "soundEffect"; type: "QUrl"; isReadonly: true }
        Property { name: "keyPanelDelegate"; type: "QQmlComponent"; isPointer: true }
        Signal { name: "clicked" }
    }
    Component {
        prototype: "QQuickItem"
        name: "QtQuick.VirtualKeyboard/HandwritingInputPanel 2.0"
        exports: ["QtQuick.VirtualKeyboard/HandwritingInputPanel 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "inputPanel"; type: "QVariant" }
        Property { name: "available"; type: "bool" }
        Property { name: "active"; type: "bool" }
    }
    Component {
        prototype: "QQuickItem"
        name: "QtQuick.VirtualKeyboard/HandwritingModeKey 2.0"
        exports: ["QtQuick.VirtualKeyboard/HandwritingModeKey 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "weight"; type: "double" }
        Property { name: "text"; type: "string" }
        Property { name: "displayText"; type: "string" }
        Property { name: "smallText"; type: "string" }
        Property { name: "smallTextVisible"; type: "bool" }
        Property { name: "alternativeKeys"; type: "QVariant" }
        Property { name: "effectiveAlternativeKeys"; type: "QVariant"; isReadonly: true }
        Property { name: "effectiveAlternativeKeysHighlightIndex"; type: "int"; isReadonly: true }
        Property { name: "key"; type: "int" }
        Property { name: "noKeyEvent"; type: "bool" }
        Property { name: "active"; type: "bool" }
        Property { name: "noModifier"; type: "bool" }
        Property { name: "repeat"; type: "bool" }
        Property { name: "highlighted"; type: "bool" }
        Property { name: "functionKey"; type: "bool" }
        Property { name: "showPreview"; type: "bool" }
        Property { name: "enabled"; type: "bool" }
        Property { name: "pressed"; type: "bool" }
        Property { name: "uppercased"; type: "bool" }
        Property { name: "soundEffect"; type: "QUrl"; isReadonly: true }
        Property { name: "keyPanelDelegate"; type: "QQmlComponent"; isPointer: true }
        Signal { name: "clicked" }
    }
    Component {
        prototype: "QQuickItem"
        name: "QtQuick.VirtualKeyboard/HideKeyboardKey 1.0"
        exports: ["QtQuick.VirtualKeyboard/HideKeyboardKey 1.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "weight"; type: "double" }
        Property { name: "text"; type: "string" }
        Property { name: "displayText"; type: "string" }
        Property { name: "smallText"; type: "string" }
        Property { name: "smallTextVisible"; type: "bool" }
        Property { name: "alternativeKeys"; type: "QVariant" }
        Property { name: "effectiveAlternativeKeys"; type: "QVariant"; isReadonly: true }
        Property { name: "effectiveAlternativeKeysHighlightIndex"; type: "int"; isReadonly: true }
        Property { name: "key"; type: "int" }
        Property { name: "noKeyEvent"; type: "bool" }
        Property { name: "active"; type: "bool" }
        Property { name: "noModifier"; type: "bool" }
        Property { name: "repeat"; type: "bool" }
        Property { name: "highlighted"; type: "bool" }
        Property { name: "functionKey"; type: "bool" }
        Property { name: "showPreview"; type: "bool" }
        Property { name: "enabled"; type: "bool" }
        Property { name: "pressed"; type: "bool" }
        Property { name: "uppercased"; type: "bool" }
        Property { name: "soundEffect"; type: "QUrl"; isReadonly: true }
        Property { name: "keyPanelDelegate"; type: "QQmlComponent"; isPointer: true }
        Signal { name: "clicked" }
    }
    Component {
        prototype: "QQuickItem"
        name: "QtQuick.VirtualKeyboard/HideKeyboardKey 2.0"
        exports: ["QtQuick.VirtualKeyboard/HideKeyboardKey 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "weight"; type: "double" }
        Property { name: "text"; type: "string" }
        Property { name: "displayText"; type: "string" }
        Property { name: "smallText"; type: "string" }
        Property { name: "smallTextVisible"; type: "bool" }
        Property { name: "alternativeKeys"; type: "QVariant" }
        Property { name: "effectiveAlternativeKeys"; type: "QVariant"; isReadonly: true }
        Property { name: "effectiveAlternativeKeysHighlightIndex"; type: "int"; isReadonly: true }
        Property { name: "key"; type: "int" }
        Property { name: "noKeyEvent"; type: "bool" }
        Property { name: "active"; type: "bool" }
        Property { name: "noModifier"; type: "bool" }
        Property { name: "repeat"; type: "bool" }
        Property { name: "highlighted"; type: "bool" }
        Property { name: "functionKey"; type: "bool" }
        Property { name: "showPreview"; type: "bool" }
        Property { name: "enabled"; type: "bool" }
        Property { name: "pressed"; type: "bool" }
        Property { name: "uppercased"; type: "bool" }
        Property { name: "soundEffect"; type: "QUrl"; isReadonly: true }
        Property { name: "keyPanelDelegate"; type: "QQmlComponent"; isPointer: true }
        Signal { name: "clicked" }
    }
    Component {
        prototype: "QQuickItem"
        name: "QtQuick.VirtualKeyboard/InputPanel 1.2"
        exports: ["QtQuick.VirtualKeyboard/InputPanel 1.2"]
        exportMetaObjectRevisions: [2]
        isComposite: true
        defaultProperty: "data"
        Property { name: "active"; type: "bool" }
        Property { name: "keyboard"; type: "Keyboard_QMLTYPE_10"; isReadonly: true; isPointer: true }
    }
    Component {
        prototype: "QQuickItem"
        name: "QtQuick.VirtualKeyboard/InputPanel 1.3"
        exports: ["QtQuick.VirtualKeyboard/InputPanel 1.3"]
        exportMetaObjectRevisions: [3]
        isComposite: true
        defaultProperty: "data"
        Property { name: "active"; type: "bool" }
        Property { name: "keyboard"; type: "Keyboard_QMLTYPE_10"; isReadonly: true; isPointer: true }
    }
    Component {
        prototype: "QQuickItem"
        name: "QtQuick.VirtualKeyboard/InputPanel 2.1"
        exports: ["QtQuick.VirtualKeyboard/InputPanel 2.1"]
        exportMetaObjectRevisions: [1]
        isComposite: true
        defaultProperty: "data"
        Property { name: "active"; type: "bool" }
        Property { name: "keyboard"; type: "Keyboard_QMLTYPE_10"; isReadonly: true; isPointer: true }
    }
    Component {
        prototype: "QQuickItem"
        name: "QtQuick.VirtualKeyboard/InputPanel 2.0"
        exports: ["QtQuick.VirtualKeyboard/InputPanel 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "active"; type: "bool" }
        Property { name: "keyboard"; type: "Keyboard_QMLTYPE_10"; isReadonly: true; isPointer: true }
    }
    Component {
        prototype: "QQuickItem"
        name: "QtQuick.VirtualKeyboard/InputPanel 1.0"
        exports: ["QtQuick.VirtualKeyboard/InputPanel 1.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "active"; type: "bool" }
        Property { name: "keyboard"; type: "Keyboard_QMLTYPE_10"; isReadonly: true; isPointer: true }
    }
    Component {
        prototype: "QQuickItem"
        name: "QtQuick.VirtualKeyboard/Key 2.0"
        exports: ["QtQuick.VirtualKeyboard/Key 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "weight"; type: "double" }
        Property { name: "text"; type: "string" }
        Property { name: "displayText"; type: "string" }
        Property { name: "smallText"; type: "string" }
        Property { name: "smallTextVisible"; type: "bool" }
        Property { name: "alternativeKeys"; type: "QVariant" }
        Property { name: "effectiveAlternativeKeys"; type: "QVariant"; isReadonly: true }
        Property { name: "effectiveAlternativeKeysHighlightIndex"; type: "int"; isReadonly: true }
        Property { name: "key"; type: "int" }
        Property { name: "noKeyEvent"; type: "bool" }
        Property { name: "active"; type: "bool" }
        Property { name: "noModifier"; type: "bool" }
        Property { name: "repeat"; type: "bool" }
        Property { name: "highlighted"; type: "bool" }
        Property { name: "functionKey"; type: "bool" }
        Property { name: "showPreview"; type: "bool" }
        Property { name: "enabled"; type: "bool" }
        Property { name: "pressed"; type: "bool" }
        Property { name: "uppercased"; type: "bool" }
        Property { name: "soundEffect"; type: "QUrl"; isReadonly: true }
        Property { name: "keyPanelDelegate"; type: "QQmlComponent"; isPointer: true }
        Signal { name: "clicked" }
    }
    Component {
        prototype: "QQuickItem"
        name: "QtQuick.VirtualKeyboard/Key 1.0"
        exports: ["QtQuick.VirtualKeyboard/Key 1.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "weight"; type: "double" }
        Property { name: "text"; type: "string" }
        Property { name: "displayText"; type: "string" }
        Property { name: "smallText"; type: "string" }
        Property { name: "smallTextVisible"; type: "bool" }
        Property { name: "alternativeKeys"; type: "QVariant" }
        Property { name: "effectiveAlternativeKeys"; type: "QVariant"; isReadonly: true }
        Property { name: "effectiveAlternativeKeysHighlightIndex"; type: "int"; isReadonly: true }
        Property { name: "key"; type: "int" }
        Property { name: "noKeyEvent"; type: "bool" }
        Property { name: "active"; type: "bool" }
        Property { name: "noModifier"; type: "bool" }
        Property { name: "repeat"; type: "bool" }
        Property { name: "highlighted"; type: "bool" }
        Property { name: "functionKey"; type: "bool" }
        Property { name: "showPreview"; type: "bool" }
        Property { name: "enabled"; type: "bool" }
        Property { name: "pressed"; type: "bool" }
        Property { name: "uppercased"; type: "bool" }
        Property { name: "soundEffect"; type: "QUrl"; isReadonly: true }
        Property { name: "keyPanelDelegate"; type: "QQmlComponent"; isPointer: true }
        Signal { name: "clicked" }
    }
    Component {
        prototype: "QQuickItem"
        name: "QtQuick.VirtualKeyboard.Styles/KeyIcon 1.0"
        exports: ["QtQuick.VirtualKeyboard.Styles/KeyIcon 1.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "color"; type: "QColor" }
        Property { name: "source"; type: "QUrl" }
    }
    Component {
        prototype: "QQuickItem"
        name: "QtQuick.VirtualKeyboard.Styles/KeyIcon 2.0"
        exports: ["QtQuick.VirtualKeyboard.Styles/KeyIcon 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "color"; type: "QColor" }
        Property { name: "source"; type: "QUrl" }
    }
    Component {
        prototype: "QQuickItem"
        name: "QtQuick.VirtualKeyboard.Styles/KeyPanel 1.0"
        exports: ["QtQuick.VirtualKeyboard.Styles/KeyPanel 1.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "control"; type: "QQuickItem"; isPointer: true }
        Property { name: "soundEffect"; type: "QUrl" }
    }
    Component {
        prototype: "QQuickItem"
        name: "QtQuick.VirtualKeyboard.Styles/KeyPanel 2.0"
        exports: ["QtQuick.VirtualKeyboard.Styles/KeyPanel 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "control"; type: "QQuickItem"; isPointer: true }
        Property { name: "soundEffect"; type: "QUrl" }
    }
    Component {
        prototype: "QQuickItem"
        name: "QtQuick.VirtualKeyboard/Keyboard 2.0"
        exports: ["QtQuick.VirtualKeyboard/Keyboard 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "activeKey"; type: "QVariant" }
        Property { name: "activeTouchPoint"; type: "QQuickTouchPoint"; isPointer: true }
        Property { name: "localeIndex"; type: "int" }
        Property { name: "availableLocaleIndices"; type: "QVariant" }
        Property { name: "availableCustomLocaleIndices"; type: "QVariant" }
        Property { name: "locale"; type: "string" }
        Property { name: "inputLocale"; type: "string" }
        Property { name: "defaultLocaleIndex"; type: "int" }
        Property { name: "latinOnly"; type: "bool" }
        Property { name: "preferNumbers"; type: "bool" }
        Property { name: "layout"; type: "string" }
        Property { name: "layoutType"; type: "string" }
        Property { name: "active"; type: "bool" }
        Property { name: "uppercased"; type: "bool" }
        Property { name: "handwritingMode"; type: "bool" }
        Property { name: "fullScreenHandwritingMode"; type: "bool" }
        Property { name: "symbolMode"; type: "bool" }
        Property { name: "defaultInputMethod"; type: "QVariant" }
        Property { name: "plainInputMethod"; type: "QVariant" }
        Property { name: "customInputMethod"; type: "QVariant" }
        Property { name: "customInputMethodSharedLayouts"; type: "QVariant" }
        Property { name: "defaultInputMode"; type: "int" }
        Property { name: "inputMethodNeedsReset"; type: "bool" }
        Property { name: "inputModeNeedsReset"; type: "bool" }
        Property { name: "navigationModeActive"; type: "bool" }
        Property { name: "style"; type: "QObject"; isReadonly: true; isPointer: true }
        Property { name: "soundEffect"; type: "QQuickItem"; isReadonly: true; isPointer: true }
        Method { name: "initDefaultInputMethod"; type: "QVariant" }
        Method { name: "updateInputMethod"; type: "QVariant" }
        Method { name: "updateLayout"; type: "QVariant" }
        Method { name: "updateDefaultLocale"; type: "QVariant" }
        Method { name: "updateAvailableLocaleIndices"; type: "QVariant" }
        Method {
            name: "nextLocaleIndex"
            type: "QVariant"
            Parameter { name: "customLayoutsOnly"; type: "QVariant" }
        }
        Method {
            name: "changeInputLanguage"
            type: "QVariant"
            Parameter { name: "customLayoutsOnly"; type: "QVariant" }
        }
        Method {
            name: "canChangeInputLanguage"
            type: "QVariant"
            Parameter { name: "customLayoutsOnly"; type: "QVariant" }
        }
        Method {
            name: "findLocale"
            type: "QVariant"
            Parameter { name: "localeName"; type: "QVariant" }
            Parameter { name: "defaultValue"; type: "QVariant" }
        }
        Method {
            name: "isValidLocale"
            type: "QVariant"
            Parameter { name: "localeNameOrIndex"; type: "QVariant" }
        }
        Method {
            name: "getLayoutFile"
            type: "QVariant"
            Parameter { name: "localeName"; type: "QVariant" }
            Parameter { name: "layoutType"; type: "QVariant" }
        }
        Method {
            name: "layoutExists"
            type: "QVariant"
            Parameter { name: "localeName"; type: "QVariant" }
            Parameter { name: "layoutType"; type: "QVariant" }
        }
        Method {
            name: "findLayout"
            type: "QVariant"
            Parameter { name: "localeName"; type: "QVariant" }
            Parameter { name: "layoutType"; type: "QVariant" }
        }
        Method { name: "isHandwritingAvailable"; type: "QVariant" }
    }
    Component {
        prototype: "QQuickItem"
        name: "QtQuick.VirtualKeyboard/Keyboard 1.0"
        exports: ["QtQuick.VirtualKeyboard/Keyboard 1.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "activeKey"; type: "QVariant" }
        Property { name: "activeTouchPoint"; type: "QQuickTouchPoint"; isPointer: true }
        Property { name: "localeIndex"; type: "int" }
        Property { name: "availableLocaleIndices"; type: "QVariant" }
        Property { name: "availableCustomLocaleIndices"; type: "QVariant" }
        Property { name: "locale"; type: "string" }
        Property { name: "inputLocale"; type: "string" }
        Property { name: "defaultLocaleIndex"; type: "int" }
        Property { name: "latinOnly"; type: "bool" }
        Property { name: "preferNumbers"; type: "bool" }
        Property { name: "layout"; type: "string" }
        Property { name: "layoutType"; type: "string" }
        Property { name: "active"; type: "bool" }
        Property { name: "uppercased"; type: "bool" }
        Property { name: "handwritingMode"; type: "bool" }
        Property { name: "fullScreenHandwritingMode"; type: "bool" }
        Property { name: "symbolMode"; type: "bool" }
        Property { name: "defaultInputMethod"; type: "QVariant" }
        Property { name: "plainInputMethod"; type: "QVariant" }
        Property { name: "customInputMethod"; type: "QVariant" }
        Property { name: "customInputMethodSharedLayouts"; type: "QVariant" }
        Property { name: "defaultInputMode"; type: "int" }
        Property { name: "inputMethodNeedsReset"; type: "bool" }
        Property { name: "inputModeNeedsReset"; type: "bool" }
        Property { name: "navigationModeActive"; type: "bool" }
        Property { name: "style"; type: "QObject"; isReadonly: true; isPointer: true }
        Property { name: "soundEffect"; type: "QQuickItem"; isReadonly: true; isPointer: true }
        Method { name: "initDefaultInputMethod"; type: "QVariant" }
        Method { name: "updateInputMethod"; type: "QVariant" }
        Method { name: "updateLayout"; type: "QVariant" }
        Method { name: "updateDefaultLocale"; type: "QVariant" }
        Method { name: "updateAvailableLocaleIndices"; type: "QVariant" }
        Method {
            name: "nextLocaleIndex"
            type: "QVariant"
            Parameter { name: "customLayoutsOnly"; type: "QVariant" }
        }
        Method {
            name: "changeInputLanguage"
            type: "QVariant"
            Parameter { name: "customLayoutsOnly"; type: "QVariant" }
        }
        Method {
            name: "canChangeInputLanguage"
            type: "QVariant"
            Parameter { name: "customLayoutsOnly"; type: "QVariant" }
        }
        Method {
            name: "findLocale"
            type: "QVariant"
            Parameter { name: "localeName"; type: "QVariant" }
            Parameter { name: "defaultValue"; type: "QVariant" }
        }
        Method {
            name: "isValidLocale"
            type: "QVariant"
            Parameter { name: "localeNameOrIndex"; type: "QVariant" }
        }
        Method {
            name: "getLayoutFile"
            type: "QVariant"
            Parameter { name: "localeName"; type: "QVariant" }
            Parameter { name: "layoutType"; type: "QVariant" }
        }
        Method {
            name: "layoutExists"
            type: "QVariant"
            Parameter { name: "localeName"; type: "QVariant" }
            Parameter { name: "layoutType"; type: "QVariant" }
        }
        Method {
            name: "findLayout"
            type: "QVariant"
            Parameter { name: "localeName"; type: "QVariant" }
            Parameter { name: "layoutType"; type: "QVariant" }
        }
        Method { name: "isHandwritingAvailable"; type: "QVariant" }
    }
    Component {
        prototype: "QQuickColumnLayout"
        name: "QtQuick.VirtualKeyboard/KeyboardColumn 2.0"
        exports: ["QtQuick.VirtualKeyboard/KeyboardColumn 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "keyWeight"; type: "double" }
        Property { name: "smallTextVisible"; type: "bool" }
    }
    Component {
        prototype: "QQuickColumnLayout"
        name: "QtQuick.VirtualKeyboard/KeyboardColumn 1.0"
        exports: ["QtQuick.VirtualKeyboard/KeyboardColumn 1.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "keyWeight"; type: "double" }
        Property { name: "smallTextVisible"; type: "bool" }
    }
    Component {
        prototype: "QQuickColumnLayout"
        name: "QtQuick.VirtualKeyboard/KeyboardLayout 1.0"
        exports: ["QtQuick.VirtualKeyboard/KeyboardLayout 1.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "inputMethod"; type: "QVariant" }
        Property { name: "sharedLayouts"; type: "QVariant" }
        Property { name: "inputMode"; type: "int" }
        Property { name: "keyWeight"; type: "double" }
        Property { name: "smallTextVisible"; type: "bool" }
        Method { name: "createInputMethod"; type: "QVariant" }
    }
    Component {
        prototype: "QQuickColumnLayout"
        name: "QtQuick.VirtualKeyboard/KeyboardLayout 2.0"
        exports: ["QtQuick.VirtualKeyboard/KeyboardLayout 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "inputMethod"; type: "QVariant" }
        Property { name: "sharedLayouts"; type: "QVariant" }
        Property { name: "inputMode"; type: "int" }
        Property { name: "keyWeight"; type: "double" }
        Property { name: "smallTextVisible"; type: "bool" }
        Method { name: "createInputMethod"; type: "QVariant" }
    }
    Component {
        prototype: "QQuickItem"
        name: "QtQuick.VirtualKeyboard/KeyboardLayoutLoader 1.1"
        exports: ["QtQuick.VirtualKeyboard/KeyboardLayoutLoader 1.1"]
        exportMetaObjectRevisions: [1]
        isComposite: true
        defaultProperty: "data"
        Property { name: "inputMethod"; type: "QVariant" }
        Property { name: "sharedLayouts"; type: "QVariant" }
        Property { name: "inputMode"; type: "int" }
        Property { name: "__updateCount"; type: "int" }
        Method { name: "createInputMethod"; type: "QVariant" }
        Property { name: "active"; type: "bool" }
        Property { name: "source"; type: "QUrl" }
        Property { name: "sourceComponent"; type: "QQmlComponent"; isPointer: true }
        Property { name: "item"; type: "QObject"; isReadonly: true; isPointer: true }
        Property { name: "status"; type: "Status"; isReadonly: true }
        Property { name: "progress"; type: "double"; isReadonly: true }
        Property { name: "asynchronous"; type: "bool" }
        Signal { name: "loaded" }
        Method {
            name: "setSource"
            Parameter { type: "QQmlV4Function"; isPointer: true }
        }
        Property { name: "implicitWidth"; type: "double"; isReadonly: true }
        Property { name: "implicitHeight"; type: "double"; isReadonly: true }
        Signal { name: "implicitWidthChanged2"; revision: 1 }
        Signal { name: "implicitHeightChanged2"; revision: 1 }
    }
    Component {
        prototype: "QQuickItem"
        name: "QtQuick.VirtualKeyboard/KeyboardLayoutLoader 2.0"
        exports: ["QtQuick.VirtualKeyboard/KeyboardLayoutLoader 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "inputMethod"; type: "QVariant" }
        Property { name: "sharedLayouts"; type: "QVariant" }
        Property { name: "inputMode"; type: "int" }
        Property { name: "__updateCount"; type: "int" }
        Method { name: "createInputMethod"; type: "QVariant" }
        Property { name: "active"; type: "bool" }
        Property { name: "source"; type: "QUrl" }
        Property { name: "sourceComponent"; type: "QQmlComponent"; isPointer: true }
        Property { name: "item"; type: "QObject"; isReadonly: true; isPointer: true }
        Property { name: "status"; type: "Status"; isReadonly: true }
        Property { name: "progress"; type: "double"; isReadonly: true }
        Property { name: "asynchronous"; type: "bool" }
        Signal { name: "loaded" }
        Method {
            name: "setSource"
            Parameter { type: "QQmlV4Function"; isPointer: true }
        }
        Property { name: "implicitWidth"; type: "double"; isReadonly: true }
        Property { name: "implicitHeight"; type: "double"; isReadonly: true }
        Signal { name: "implicitWidthChanged2"; revision: 1 }
        Signal { name: "implicitHeightChanged2"; revision: 1 }
    }
    Component {
        prototype: "QQuickRowLayout"
        name: "QtQuick.VirtualKeyboard/KeyboardRow 2.0"
        exports: ["QtQuick.VirtualKeyboard/KeyboardRow 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "keyWeight"; type: "double" }
        Property { name: "smallTextVisible"; type: "bool" }
    }
    Component {
        prototype: "QQuickRowLayout"
        name: "QtQuick.VirtualKeyboard/KeyboardRow 1.0"
        exports: ["QtQuick.VirtualKeyboard/KeyboardRow 1.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "keyWeight"; type: "double" }
        Property { name: "smallTextVisible"; type: "bool" }
    }
    Component {
        prototype: "QObject"
        name: "QtQuick.VirtualKeyboard.Styles/KeyboardStyle 1.1"
        exports: ["QtQuick.VirtualKeyboard.Styles/KeyboardStyle 1.1"]
        exportMetaObjectRevisions: [1]
        isComposite: true
        Property { name: "keyboardHeight"; type: "double" }
        Property { name: "keyboardDesignWidth"; type: "double" }
        Property { name: "keyboardDesignHeight"; type: "double" }
        Property { name: "scaleHint"; type: "double"; isReadonly: true }
        Property { name: "keyboardRelativeLeftMargin"; type: "double" }
        Property { name: "keyboardRelativeRightMargin"; type: "double" }
        Property { name: "keyboardRelativeTopMargin"; type: "double" }
        Property { name: "keyboardRelativeBottomMargin"; type: "double" }
        Property { name: "keyboardBackground"; type: "QQmlComponent"; isPointer: true }
        Property { name: "keyPanel"; type: "QQmlComponent"; isPointer: true }
        Property { name: "backspaceKeyPanel"; type: "QQmlComponent"; isPointer: true }
        Property { name: "languageKeyPanel"; type: "QQmlComponent"; isPointer: true }
        Property { name: "enterKeyPanel"; type: "QQmlComponent"; isPointer: true }
        Property { name: "hideKeyPanel"; type: "QQmlComponent"; isPointer: true }
        Property { name: "shiftKeyPanel"; type: "QQmlComponent"; isPointer: true }
        Property { name: "spaceKeyPanel"; type: "QQmlComponent"; isPointer: true }
        Property { name: "symbolKeyPanel"; type: "QQmlComponent"; isPointer: true }
        Property { name: "modeKeyPanel"; type: "QQmlComponent"; isPointer: true }
        Property { name: "handwritingKeyPanel"; type: "QQmlComponent"; isPointer: true }
        Property { name: "characterPreviewMargin"; type: "double" }
        Property { name: "characterPreviewDelegate"; type: "QQmlComponent"; isPointer: true }
        Property { name: "alternateKeysListItemWidth"; type: "double" }
        Property { name: "alternateKeysListItemHeight"; type: "double" }
        Property { name: "alternateKeysListTopMargin"; type: "double" }
        Property { name: "alternateKeysListBottomMargin"; type: "double" }
        Property { name: "alternateKeysListLeftMargin"; type: "double" }
        Property { name: "alternateKeysListRightMargin"; type: "double" }
        Property { name: "alternateKeysListDelegate"; type: "QQmlComponent"; isPointer: true }
        Property { name: "alternateKeysListHighlight"; type: "QQmlComponent"; isPointer: true }
        Property { name: "alternateKeysListBackground"; type: "QQmlComponent"; isPointer: true }
        Property { name: "selectionListHeight"; type: "double" }
        Property { name: "selectionListDelegate"; type: "QQmlComponent"; isPointer: true }
        Property { name: "selectionListHighlight"; type: "QQmlComponent"; isPointer: true }
        Property { name: "selectionListBackground"; type: "QQmlComponent"; isPointer: true }
        Property { name: "selectionListAdd"; type: "QQuickTransition"; isPointer: true }
        Property { name: "selectionListRemove"; type: "QQuickTransition"; isPointer: true }
        Property { name: "navigationHighlight"; type: "QQmlComponent"; isPointer: true }
        Property { name: "traceInputKeyPanelDelegate"; type: "QQmlComponent"; isPointer: true }
        Property { name: "traceCanvasDelegate"; type: "QQmlComponent"; isPointer: true }
        Property { name: "popupListDelegate"; type: "QQmlComponent"; isPointer: true }
        Property { name: "popupListHighlight"; type: "QQmlComponent"; isPointer: true }
        Property { name: "popupListBackground"; type: "QQmlComponent"; isPointer: true }
        Property { name: "popupListAdd"; type: "QQuickTransition"; isPointer: true }
        Property { name: "popupListRemove"; type: "QQuickTransition"; isPointer: true }
        Property { name: "selectionHandle"; type: "QQmlComponent"; isPointer: true }
    }
    Component {
        prototype: "QObject"
        name: "QtQuick.VirtualKeyboard.Styles/KeyboardStyle 2.1"
        exports: ["QtQuick.VirtualKeyboard.Styles/KeyboardStyle 2.1"]
        exportMetaObjectRevisions: [1]
        isComposite: true
        Property { name: "keyboardHeight"; type: "double" }
        Property { name: "keyboardDesignWidth"; type: "double" }
        Property { name: "keyboardDesignHeight"; type: "double" }
        Property { name: "scaleHint"; type: "double"; isReadonly: true }
        Property { name: "keyboardRelativeLeftMargin"; type: "double" }
        Property { name: "keyboardRelativeRightMargin"; type: "double" }
        Property { name: "keyboardRelativeTopMargin"; type: "double" }
        Property { name: "keyboardRelativeBottomMargin"; type: "double" }
        Property { name: "keyboardBackground"; type: "QQmlComponent"; isPointer: true }
        Property { name: "keyPanel"; type: "QQmlComponent"; isPointer: true }
        Property { name: "backspaceKeyPanel"; type: "QQmlComponent"; isPointer: true }
        Property { name: "languageKeyPanel"; type: "QQmlComponent"; isPointer: true }
        Property { name: "enterKeyPanel"; type: "QQmlComponent"; isPointer: true }
        Property { name: "hideKeyPanel"; type: "QQmlComponent"; isPointer: true }
        Property { name: "shiftKeyPanel"; type: "QQmlComponent"; isPointer: true }
        Property { name: "spaceKeyPanel"; type: "QQmlComponent"; isPointer: true }
        Property { name: "symbolKeyPanel"; type: "QQmlComponent"; isPointer: true }
        Property { name: "modeKeyPanel"; type: "QQmlComponent"; isPointer: true }
        Property { name: "handwritingKeyPanel"; type: "QQmlComponent"; isPointer: true }
        Property { name: "characterPreviewMargin"; type: "double" }
        Property { name: "characterPreviewDelegate"; type: "QQmlComponent"; isPointer: true }
        Property { name: "alternateKeysListItemWidth"; type: "double" }
        Property { name: "alternateKeysListItemHeight"; type: "double" }
        Property { name: "alternateKeysListTopMargin"; type: "double" }
        Property { name: "alternateKeysListBottomMargin"; type: "double" }
        Property { name: "alternateKeysListLeftMargin"; type: "double" }
        Property { name: "alternateKeysListRightMargin"; type: "double" }
        Property { name: "alternateKeysListDelegate"; type: "QQmlComponent"; isPointer: true }
        Property { name: "alternateKeysListHighlight"; type: "QQmlComponent"; isPointer: true }
        Property { name: "alternateKeysListBackground"; type: "QQmlComponent"; isPointer: true }
        Property { name: "selectionListHeight"; type: "double" }
        Property { name: "selectionListDelegate"; type: "QQmlComponent"; isPointer: true }
        Property { name: "selectionListHighlight"; type: "QQmlComponent"; isPointer: true }
        Property { name: "selectionListBackground"; type: "QQmlComponent"; isPointer: true }
        Property { name: "selectionListAdd"; type: "QQuickTransition"; isPointer: true }
        Property { name: "selectionListRemove"; type: "QQuickTransition"; isPointer: true }
        Property { name: "navigationHighlight"; type: "QQmlComponent"; isPointer: true }
        Property { name: "traceInputKeyPanelDelegate"; type: "QQmlComponent"; isPointer: true }
        Property { name: "traceCanvasDelegate"; type: "QQmlComponent"; isPointer: true }
        Property { name: "popupListDelegate"; type: "QQmlComponent"; isPointer: true }
        Property { name: "popupListHighlight"; type: "QQmlComponent"; isPointer: true }
        Property { name: "popupListBackground"; type: "QQmlComponent"; isPointer: true }
        Property { name: "popupListAdd"; type: "QQuickTransition"; isPointer: true }
        Property { name: "popupListRemove"; type: "QQuickTransition"; isPointer: true }
        Property { name: "selectionHandle"; type: "QQmlComponent"; isPointer: true }
    }
    Component {
        prototype: "QObject"
        name: "QtQuick.VirtualKeyboard.Styles/KeyboardStyle 2.0"
        exports: ["QtQuick.VirtualKeyboard.Styles/KeyboardStyle 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        Property { name: "keyboardHeight"; type: "double" }
        Property { name: "keyboardDesignWidth"; type: "double" }
        Property { name: "keyboardDesignHeight"; type: "double" }
        Property { name: "scaleHint"; type: "double"; isReadonly: true }
        Property { name: "keyboardRelativeLeftMargin"; type: "double" }
        Property { name: "keyboardRelativeRightMargin"; type: "double" }
        Property { name: "keyboardRelativeTopMargin"; type: "double" }
        Property { name: "keyboardRelativeBottomMargin"; type: "double" }
        Property { name: "keyboardBackground"; type: "QQmlComponent"; isPointer: true }
        Property { name: "keyPanel"; type: "QQmlComponent"; isPointer: true }
        Property { name: "backspaceKeyPanel"; type: "QQmlComponent"; isPointer: true }
        Property { name: "languageKeyPanel"; type: "QQmlComponent"; isPointer: true }
        Property { name: "enterKeyPanel"; type: "QQmlComponent"; isPointer: true }
        Property { name: "hideKeyPanel"; type: "QQmlComponent"; isPointer: true }
        Property { name: "shiftKeyPanel"; type: "QQmlComponent"; isPointer: true }
        Property { name: "spaceKeyPanel"; type: "QQmlComponent"; isPointer: true }
        Property { name: "symbolKeyPanel"; type: "QQmlComponent"; isPointer: true }
        Property { name: "modeKeyPanel"; type: "QQmlComponent"; isPointer: true }
        Property { name: "handwritingKeyPanel"; type: "QQmlComponent"; isPointer: true }
        Property { name: "characterPreviewMargin"; type: "double" }
        Property { name: "characterPreviewDelegate"; type: "QQmlComponent"; isPointer: true }
        Property { name: "alternateKeysListItemWidth"; type: "double" }
        Property { name: "alternateKeysListItemHeight"; type: "double" }
        Property { name: "alternateKeysListTopMargin"; type: "double" }
        Property { name: "alternateKeysListBottomMargin"; type: "double" }
        Property { name: "alternateKeysListLeftMargin"; type: "double" }
        Property { name: "alternateKeysListRightMargin"; type: "double" }
        Property { name: "alternateKeysListDelegate"; type: "QQmlComponent"; isPointer: true }
        Property { name: "alternateKeysListHighlight"; type: "QQmlComponent"; isPointer: true }
        Property { name: "alternateKeysListBackground"; type: "QQmlComponent"; isPointer: true }
        Property { name: "selectionListHeight"; type: "double" }
        Property { name: "selectionListDelegate"; type: "QQmlComponent"; isPointer: true }
        Property { name: "selectionListHighlight"; type: "QQmlComponent"; isPointer: true }
        Property { name: "selectionListBackground"; type: "QQmlComponent"; isPointer: true }
        Property { name: "selectionListAdd"; type: "QQuickTransition"; isPointer: true }
        Property { name: "selectionListRemove"; type: "QQuickTransition"; isPointer: true }
        Property { name: "navigationHighlight"; type: "QQmlComponent"; isPointer: true }
        Property { name: "traceInputKeyPanelDelegate"; type: "QQmlComponent"; isPointer: true }
        Property { name: "traceCanvasDelegate"; type: "QQmlComponent"; isPointer: true }
        Property { name: "popupListDelegate"; type: "QQmlComponent"; isPointer: true }
        Property { name: "popupListHighlight"; type: "QQmlComponent"; isPointer: true }
        Property { name: "popupListBackground"; type: "QQmlComponent"; isPointer: true }
        Property { name: "popupListAdd"; type: "QQuickTransition"; isPointer: true }
        Property { name: "popupListRemove"; type: "QQuickTransition"; isPointer: true }
        Property { name: "selectionHandle"; type: "QQmlComponent"; isPointer: true }
    }
    Component {
        prototype: "QObject"
        name: "QtQuick.VirtualKeyboard.Styles/KeyboardStyle 1.2"
        exports: ["QtQuick.VirtualKeyboard.Styles/KeyboardStyle 1.2"]
        exportMetaObjectRevisions: [2]
        isComposite: true
        Property { name: "keyboardHeight"; type: "double" }
        Property { name: "keyboardDesignWidth"; type: "double" }
        Property { name: "keyboardDesignHeight"; type: "double" }
        Property { name: "scaleHint"; type: "double"; isReadonly: true }
        Property { name: "keyboardRelativeLeftMargin"; type: "double" }
        Property { name: "keyboardRelativeRightMargin"; type: "double" }
        Property { name: "keyboardRelativeTopMargin"; type: "double" }
        Property { name: "keyboardRelativeBottomMargin"; type: "double" }
        Property { name: "keyboardBackground"; type: "QQmlComponent"; isPointer: true }
        Property { name: "keyPanel"; type: "QQmlComponent"; isPointer: true }
        Property { name: "backspaceKeyPanel"; type: "QQmlComponent"; isPointer: true }
        Property { name: "languageKeyPanel"; type: "QQmlComponent"; isPointer: true }
        Property { name: "enterKeyPanel"; type: "QQmlComponent"; isPointer: true }
        Property { name: "hideKeyPanel"; type: "QQmlComponent"; isPointer: true }
        Property { name: "shiftKeyPanel"; type: "QQmlComponent"; isPointer: true }
        Property { name: "spaceKeyPanel"; type: "QQmlComponent"; isPointer: true }
        Property { name: "symbolKeyPanel"; type: "QQmlComponent"; isPointer: true }
        Property { name: "modeKeyPanel"; type: "QQmlComponent"; isPointer: true }
        Property { name: "handwritingKeyPanel"; type: "QQmlComponent"; isPointer: true }
        Property { name: "characterPreviewMargin"; type: "double" }
        Property { name: "characterPreviewDelegate"; type: "QQmlComponent"; isPointer: true }
        Property { name: "alternateKeysListItemWidth"; type: "double" }
        Property { name: "alternateKeysListItemHeight"; type: "double" }
        Property { name: "alternateKeysListTopMargin"; type: "double" }
        Property { name: "alternateKeysListBottomMargin"; type: "double" }
        Property { name: "alternateKeysListLeftMargin"; type: "double" }
        Property { name: "alternateKeysListRightMargin"; type: "double" }
        Property { name: "alternateKeysListDelegate"; type: "QQmlComponent"; isPointer: true }
        Property { name: "alternateKeysListHighlight"; type: "QQmlComponent"; isPointer: true }
        Property { name: "alternateKeysListBackground"; type: "QQmlComponent"; isPointer: true }
        Property { name: "selectionListHeight"; type: "double" }
        Property { name: "selectionListDelegate"; type: "QQmlComponent"; isPointer: true }
        Property { name: "selectionListHighlight"; type: "QQmlComponent"; isPointer: true }
        Property { name: "selectionListBackground"; type: "QQmlComponent"; isPointer: true }
        Property { name: "selectionListAdd"; type: "QQuickTransition"; isPointer: true }
        Property { name: "selectionListRemove"; type: "QQuickTransition"; isPointer: true }
        Property { name: "navigationHighlight"; type: "QQmlComponent"; isPointer: true }
        Property { name: "traceInputKeyPanelDelegate"; type: "QQmlComponent"; isPointer: true }
        Property { name: "traceCanvasDelegate"; type: "QQmlComponent"; isPointer: true }
        Property { name: "popupListDelegate"; type: "QQmlComponent"; isPointer: true }
        Property { name: "popupListHighlight"; type: "QQmlComponent"; isPointer: true }
        Property { name: "popupListBackground"; type: "QQmlComponent"; isPointer: true }
        Property { name: "popupListAdd"; type: "QQuickTransition"; isPointer: true }
        Property { name: "popupListRemove"; type: "QQuickTransition"; isPointer: true }
        Property { name: "selectionHandle"; type: "QQmlComponent"; isPointer: true }
    }
    Component {
        prototype: "QObject"
        name: "QtQuick.VirtualKeyboard.Styles/KeyboardStyle 1.0"
        exports: ["QtQuick.VirtualKeyboard.Styles/KeyboardStyle 1.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        Property { name: "keyboardHeight"; type: "double" }
        Property { name: "keyboardDesignWidth"; type: "double" }
        Property { name: "keyboardDesignHeight"; type: "double" }
        Property { name: "scaleHint"; type: "double"; isReadonly: true }
        Property { name: "keyboardRelativeLeftMargin"; type: "double" }
        Property { name: "keyboardRelativeRightMargin"; type: "double" }
        Property { name: "keyboardRelativeTopMargin"; type: "double" }
        Property { name: "keyboardRelativeBottomMargin"; type: "double" }
        Property { name: "keyboardBackground"; type: "QQmlComponent"; isPointer: true }
        Property { name: "keyPanel"; type: "QQmlComponent"; isPointer: true }
        Property { name: "backspaceKeyPanel"; type: "QQmlComponent"; isPointer: true }
        Property { name: "languageKeyPanel"; type: "QQmlComponent"; isPointer: true }
        Property { name: "enterKeyPanel"; type: "QQmlComponent"; isPointer: true }
        Property { name: "hideKeyPanel"; type: "QQmlComponent"; isPointer: true }
        Property { name: "shiftKeyPanel"; type: "QQmlComponent"; isPointer: true }
        Property { name: "spaceKeyPanel"; type: "QQmlComponent"; isPointer: true }
        Property { name: "symbolKeyPanel"; type: "QQmlComponent"; isPointer: true }
        Property { name: "modeKeyPanel"; type: "QQmlComponent"; isPointer: true }
        Property { name: "handwritingKeyPanel"; type: "QQmlComponent"; isPointer: true }
        Property { name: "characterPreviewMargin"; type: "double" }
        Property { name: "characterPreviewDelegate"; type: "QQmlComponent"; isPointer: true }
        Property { name: "alternateKeysListItemWidth"; type: "double" }
        Property { name: "alternateKeysListItemHeight"; type: "double" }
        Property { name: "alternateKeysListTopMargin"; type: "double" }
        Property { name: "alternateKeysListBottomMargin"; type: "double" }
        Property { name: "alternateKeysListLeftMargin"; type: "double" }
        Property { name: "alternateKeysListRightMargin"; type: "double" }
        Property { name: "alternateKeysListDelegate"; type: "QQmlComponent"; isPointer: true }
        Property { name: "alternateKeysListHighlight"; type: "QQmlComponent"; isPointer: true }
        Property { name: "alternateKeysListBackground"; type: "QQmlComponent"; isPointer: true }
        Property { name: "selectionListHeight"; type: "double" }
        Property { name: "selectionListDelegate"; type: "QQmlComponent"; isPointer: true }
        Property { name: "selectionListHighlight"; type: "QQmlComponent"; isPointer: true }
        Property { name: "selectionListBackground"; type: "QQmlComponent"; isPointer: true }
        Property { name: "selectionListAdd"; type: "QQuickTransition"; isPointer: true }
        Property { name: "selectionListRemove"; type: "QQuickTransition"; isPointer: true }
        Property { name: "navigationHighlight"; type: "QQmlComponent"; isPointer: true }
        Property { name: "traceInputKeyPanelDelegate"; type: "QQmlComponent"; isPointer: true }
        Property { name: "traceCanvasDelegate"; type: "QQmlComponent"; isPointer: true }
        Property { name: "popupListDelegate"; type: "QQmlComponent"; isPointer: true }
        Property { name: "popupListHighlight"; type: "QQmlComponent"; isPointer: true }
        Property { name: "popupListBackground"; type: "QQmlComponent"; isPointer: true }
        Property { name: "popupListAdd"; type: "QQuickTransition"; isPointer: true }
        Property { name: "popupListRemove"; type: "QQuickTransition"; isPointer: true }
        Property { name: "selectionHandle"; type: "QQmlComponent"; isPointer: true }
    }
    Component {
        prototype: "QObject"
        name: "QtQuick.VirtualKeyboard.Styles/KeyboardStyle 1.3"
        exports: ["QtQuick.VirtualKeyboard.Styles/KeyboardStyle 1.3"]
        exportMetaObjectRevisions: [3]
        isComposite: true
        Property { name: "keyboardHeight"; type: "double" }
        Property { name: "keyboardDesignWidth"; type: "double" }
        Property { name: "keyboardDesignHeight"; type: "double" }
        Property { name: "scaleHint"; type: "double"; isReadonly: true }
        Property { name: "keyboardRelativeLeftMargin"; type: "double" }
        Property { name: "keyboardRelativeRightMargin"; type: "double" }
        Property { name: "keyboardRelativeTopMargin"; type: "double" }
        Property { name: "keyboardRelativeBottomMargin"; type: "double" }
        Property { name: "keyboardBackground"; type: "QQmlComponent"; isPointer: true }
        Property { name: "keyPanel"; type: "QQmlComponent"; isPointer: true }
        Property { name: "backspaceKeyPanel"; type: "QQmlComponent"; isPointer: true }
        Property { name: "languageKeyPanel"; type: "QQmlComponent"; isPointer: true }
        Property { name: "enterKeyPanel"; type: "QQmlComponent"; isPointer: true }
        Property { name: "hideKeyPanel"; type: "QQmlComponent"; isPointer: true }
        Property { name: "shiftKeyPanel"; type: "QQmlComponent"; isPointer: true }
        Property { name: "spaceKeyPanel"; type: "QQmlComponent"; isPointer: true }
        Property { name: "symbolKeyPanel"; type: "QQmlComponent"; isPointer: true }
        Property { name: "modeKeyPanel"; type: "QQmlComponent"; isPointer: true }
        Property { name: "handwritingKeyPanel"; type: "QQmlComponent"; isPointer: true }
        Property { name: "characterPreviewMargin"; type: "double" }
        Property { name: "characterPreviewDelegate"; type: "QQmlComponent"; isPointer: true }
        Property { name: "alternateKeysListItemWidth"; type: "double" }
        Property { name: "alternateKeysListItemHeight"; type: "double" }
        Property { name: "alternateKeysListTopMargin"; type: "double" }
        Property { name: "alternateKeysListBottomMargin"; type: "double" }
        Property { name: "alternateKeysListLeftMargin"; type: "double" }
        Property { name: "alternateKeysListRightMargin"; type: "double" }
        Property { name: "alternateKeysListDelegate"; type: "QQmlComponent"; isPointer: true }
        Property { name: "alternateKeysListHighlight"; type: "QQmlComponent"; isPointer: true }
        Property { name: "alternateKeysListBackground"; type: "QQmlComponent"; isPointer: true }
        Property { name: "selectionListHeight"; type: "double" }
        Property { name: "selectionListDelegate"; type: "QQmlComponent"; isPointer: true }
        Property { name: "selectionListHighlight"; type: "QQmlComponent"; isPointer: true }
        Property { name: "selectionListBackground"; type: "QQmlComponent"; isPointer: true }
        Property { name: "selectionListAdd"; type: "QQuickTransition"; isPointer: true }
        Property { name: "selectionListRemove"; type: "QQuickTransition"; isPointer: true }
        Property { name: "navigationHighlight"; type: "QQmlComponent"; isPointer: true }
        Property { name: "traceInputKeyPanelDelegate"; type: "QQmlComponent"; isPointer: true }
        Property { name: "traceCanvasDelegate"; type: "QQmlComponent"; isPointer: true }
        Property { name: "popupListDelegate"; type: "QQmlComponent"; isPointer: true }
        Property { name: "popupListHighlight"; type: "QQmlComponent"; isPointer: true }
        Property { name: "popupListBackground"; type: "QQmlComponent"; isPointer: true }
        Property { name: "popupListAdd"; type: "QQuickTransition"; isPointer: true }
        Property { name: "popupListRemove"; type: "QQuickTransition"; isPointer: true }
        Property { name: "selectionHandle"; type: "QQmlComponent"; isPointer: true }
    }
    Component {
        prototype: "QQuickItem"
        name: "QtQuick.VirtualKeyboard/ModeKey 2.0"
        exports: ["QtQuick.VirtualKeyboard/ModeKey 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "mode"; type: "bool" }
        Property { name: "weight"; type: "double" }
        Property { name: "text"; type: "string" }
        Property { name: "displayText"; type: "string" }
        Property { name: "smallText"; type: "string" }
        Property { name: "smallTextVisible"; type: "bool" }
        Property { name: "alternativeKeys"; type: "QVariant" }
        Property { name: "effectiveAlternativeKeys"; type: "QVariant"; isReadonly: true }
        Property { name: "effectiveAlternativeKeysHighlightIndex"; type: "int"; isReadonly: true }
        Property { name: "key"; type: "int" }
        Property { name: "noKeyEvent"; type: "bool" }
        Property { name: "active"; type: "bool" }
        Property { name: "noModifier"; type: "bool" }
        Property { name: "repeat"; type: "bool" }
        Property { name: "highlighted"; type: "bool" }
        Property { name: "functionKey"; type: "bool" }
        Property { name: "showPreview"; type: "bool" }
        Property { name: "enabled"; type: "bool" }
        Property { name: "pressed"; type: "bool" }
        Property { name: "uppercased"; type: "bool" }
        Property { name: "soundEffect"; type: "QUrl"; isReadonly: true }
        Property { name: "keyPanelDelegate"; type: "QQmlComponent"; isPointer: true }
        Signal { name: "clicked" }
    }
    Component {
        prototype: "QQuickItem"
        name: "QtQuick.VirtualKeyboard/MultiSoundEffect 1.1"
        exports: ["QtQuick.VirtualKeyboard/MultiSoundEffect 1.1"]
        exportMetaObjectRevisions: [1]
        isComposite: true
        defaultProperty: "data"
        Property { name: "source"; type: "QUrl" }
        Property { name: "maxInstances"; type: "int" }
        Property { name: "__cachedInstances"; type: "QVariant" }
        Property { name: "__currentIndex"; type: "int" }
        Signal {
            name: "playingChanged"
            Parameter { name: "source"; type: "QUrl" }
            Parameter { name: "playing"; type: "bool" }
        }
        Method { name: "play"; type: "QVariant" }
    }
    Component {
        prototype: "QQuickItem"
        name: "QtQuick.VirtualKeyboard/MultiSoundEffect 2.0"
        exports: ["QtQuick.VirtualKeyboard/MultiSoundEffect 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "source"; type: "QUrl" }
        Property { name: "maxInstances"; type: "int" }
        Property { name: "__cachedInstances"; type: "QVariant" }
        Property { name: "__currentIndex"; type: "int" }
        Signal {
            name: "playingChanged"
            Parameter { name: "source"; type: "QUrl" }
            Parameter { name: "playing"; type: "bool" }
        }
        Method { name: "play"; type: "QVariant" }
    }
    Component {
        prototype: "QtVirtualKeyboard::InputMethod"
        name: "QtQuick.VirtualKeyboard/MultitapInputMethod 1.0"
        exports: ["QtQuick.VirtualKeyboard/MultitapInputMethod 1.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        Property { name: "multitapSequence"; type: "string" }
        Property { name: "multitapIndex"; type: "int" }
        Property { name: "multiTapTimer"; type: "QVariant" }
        Method {
            name: "inputModes"
            type: "QVariant"
            Parameter { name: "locale"; type: "QVariant" }
        }
        Method {
            name: "setInputMode"
            type: "QVariant"
            Parameter { name: "locale"; type: "QVariant" }
            Parameter { name: "inputMode"; type: "QVariant" }
        }
        Method {
            name: "setTextCase"
            type: "QVariant"
            Parameter { name: "textCase"; type: "QVariant" }
        }
        Method { name: "reset"; type: "QVariant" }
        Method { name: "update"; type: "QVariant" }
        Method {
            name: "keyEvent"
            type: "QVariant"
            Parameter { name: "key"; type: "QVariant" }
            Parameter { name: "text"; type: "QVariant" }
            Parameter { name: "modifiers"; type: "QVariant" }
        }
        Method { name: "selectionLists"; type: "QVariant" }
        Method {
            name: "selectionListItemCount"
            type: "QVariant"
            Parameter { name: "type"; type: "QVariant" }
        }
        Method {
            name: "selectionListData"
            type: "QVariant"
            Parameter { name: "type"; type: "QVariant" }
            Parameter { name: "index"; type: "QVariant" }
            Parameter { name: "role"; type: "QVariant" }
        }
        Method {
            name: "selectionListItemSelected"
            type: "QVariant"
            Parameter { name: "type"; type: "QVariant" }
            Parameter { name: "index"; type: "QVariant" }
        }
    }
    Component {
        prototype: "QtVirtualKeyboard::InputMethod"
        name: "QtQuick.VirtualKeyboard/MultitapInputMethod 2.0"
        exports: ["QtQuick.VirtualKeyboard/MultitapInputMethod 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        Property { name: "multitapSequence"; type: "string" }
        Property { name: "multitapIndex"; type: "int" }
        Property { name: "multiTapTimer"; type: "QVariant" }
        Method {
            name: "inputModes"
            type: "QVariant"
            Parameter { name: "locale"; type: "QVariant" }
        }
        Method {
            name: "setInputMode"
            type: "QVariant"
            Parameter { name: "locale"; type: "QVariant" }
            Parameter { name: "inputMode"; type: "QVariant" }
        }
        Method {
            name: "setTextCase"
            type: "QVariant"
            Parameter { name: "textCase"; type: "QVariant" }
        }
        Method { name: "reset"; type: "QVariant" }
        Method { name: "update"; type: "QVariant" }
        Method {
            name: "keyEvent"
            type: "QVariant"
            Parameter { name: "key"; type: "QVariant" }
            Parameter { name: "text"; type: "QVariant" }
            Parameter { name: "modifiers"; type: "QVariant" }
        }
        Method { name: "selectionLists"; type: "QVariant" }
        Method {
            name: "selectionListItemCount"
            type: "QVariant"
            Parameter { name: "type"; type: "QVariant" }
        }
        Method {
            name: "selectionListData"
            type: "QVariant"
            Parameter { name: "type"; type: "QVariant" }
            Parameter { name: "index"; type: "QVariant" }
            Parameter { name: "role"; type: "QVariant" }
        }
        Method {
            name: "selectionListItemSelected"
            type: "QVariant"
            Parameter { name: "type"; type: "QVariant" }
            Parameter { name: "index"; type: "QVariant" }
        }
    }
    Component {
        prototype: "QQuickItem"
        name: "QtQuick.VirtualKeyboard/NumberKey 1.0"
        exports: ["QtQuick.VirtualKeyboard/NumberKey 1.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "weight"; type: "double" }
        Property { name: "text"; type: "string" }
        Property { name: "displayText"; type: "string" }
        Property { name: "smallText"; type: "string" }
        Property { name: "smallTextVisible"; type: "bool" }
        Property { name: "alternativeKeys"; type: "QVariant" }
        Property { name: "effectiveAlternativeKeys"; type: "QVariant"; isReadonly: true }
        Property { name: "effectiveAlternativeKeysHighlightIndex"; type: "int"; isReadonly: true }
        Property { name: "key"; type: "int" }
        Property { name: "noKeyEvent"; type: "bool" }
        Property { name: "active"; type: "bool" }
        Property { name: "noModifier"; type: "bool" }
        Property { name: "repeat"; type: "bool" }
        Property { name: "highlighted"; type: "bool" }
        Property { name: "functionKey"; type: "bool" }
        Property { name: "showPreview"; type: "bool" }
        Property { name: "enabled"; type: "bool" }
        Property { name: "pressed"; type: "bool" }
        Property { name: "uppercased"; type: "bool" }
        Property { name: "soundEffect"; type: "QUrl"; isReadonly: true }
        Property { name: "keyPanelDelegate"; type: "QQmlComponent"; isPointer: true }
        Signal { name: "clicked" }
    }
    Component {
        prototype: "QQuickItem"
        name: "QtQuick.VirtualKeyboard/NumberKey 2.0"
        exports: ["QtQuick.VirtualKeyboard/NumberKey 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "weight"; type: "double" }
        Property { name: "text"; type: "string" }
        Property { name: "displayText"; type: "string" }
        Property { name: "smallText"; type: "string" }
        Property { name: "smallTextVisible"; type: "bool" }
        Property { name: "alternativeKeys"; type: "QVariant" }
        Property { name: "effectiveAlternativeKeys"; type: "QVariant"; isReadonly: true }
        Property { name: "effectiveAlternativeKeysHighlightIndex"; type: "int"; isReadonly: true }
        Property { name: "key"; type: "int" }
        Property { name: "noKeyEvent"; type: "bool" }
        Property { name: "active"; type: "bool" }
        Property { name: "noModifier"; type: "bool" }
        Property { name: "repeat"; type: "bool" }
        Property { name: "highlighted"; type: "bool" }
        Property { name: "functionKey"; type: "bool" }
        Property { name: "showPreview"; type: "bool" }
        Property { name: "enabled"; type: "bool" }
        Property { name: "pressed"; type: "bool" }
        Property { name: "uppercased"; type: "bool" }
        Property { name: "soundEffect"; type: "QUrl"; isReadonly: true }
        Property { name: "keyPanelDelegate"; type: "QQmlComponent"; isPointer: true }
        Signal { name: "clicked" }
    }
    Component {
        prototype: "QQuickItem"
        name: "QtQuick.VirtualKeyboard/SelectionControl 2.1"
        exports: ["QtQuick.VirtualKeyboard/SelectionControl 2.1"]
        exportMetaObjectRevisions: [1]
        isComposite: true
        defaultProperty: "data"
        Property { name: "handleIsMoving"; type: "bool" }
    }
    Component {
        prototype: "QQuickItem"
        name: "QtQuick.VirtualKeyboard.Styles/SelectionListItem 2.0"
        exports: ["QtQuick.VirtualKeyboard.Styles/SelectionListItem 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "soundEffect"; type: "QUrl" }
    }
    Component {
        prototype: "QQuickItem"
        name: "QtQuick.VirtualKeyboard.Styles/SelectionListItem 1.0"
        exports: ["QtQuick.VirtualKeyboard.Styles/SelectionListItem 1.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "soundEffect"; type: "QUrl" }
    }
    Component {
        prototype: "QQuickItem"
        name: "QtQuick.VirtualKeyboard/ShiftKey 2.0"
        exports: ["QtQuick.VirtualKeyboard/ShiftKey 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "capsLock"; type: "bool" }
        Property { name: "shift"; type: "bool" }
        Property { name: "weight"; type: "double" }
        Property { name: "text"; type: "string" }
        Property { name: "displayText"; type: "string" }
        Property { name: "smallText"; type: "string" }
        Property { name: "smallTextVisible"; type: "bool" }
        Property { name: "alternativeKeys"; type: "QVariant" }
        Property { name: "effectiveAlternativeKeys"; type: "QVariant"; isReadonly: true }
        Property { name: "effectiveAlternativeKeysHighlightIndex"; type: "int"; isReadonly: true }
        Property { name: "key"; type: "int" }
        Property { name: "noKeyEvent"; type: "bool" }
        Property { name: "active"; type: "bool" }
        Property { name: "noModifier"; type: "bool" }
        Property { name: "repeat"; type: "bool" }
        Property { name: "highlighted"; type: "bool" }
        Property { name: "functionKey"; type: "bool" }
        Property { name: "showPreview"; type: "bool" }
        Property { name: "enabled"; type: "bool" }
        Property { name: "pressed"; type: "bool" }
        Property { name: "uppercased"; type: "bool" }
        Property { name: "soundEffect"; type: "QUrl"; isReadonly: true }
        Property { name: "keyPanelDelegate"; type: "QQmlComponent"; isPointer: true }
        Signal { name: "clicked" }
    }
    Component {
        prototype: "QQuickItem"
        name: "QtQuick.VirtualKeyboard/ShiftKey 1.0"
        exports: ["QtQuick.VirtualKeyboard/ShiftKey 1.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "capsLock"; type: "bool" }
        Property { name: "shift"; type: "bool" }
        Property { name: "weight"; type: "double" }
        Property { name: "text"; type: "string" }
        Property { name: "displayText"; type: "string" }
        Property { name: "smallText"; type: "string" }
        Property { name: "smallTextVisible"; type: "bool" }
        Property { name: "alternativeKeys"; type: "QVariant" }
        Property { name: "effectiveAlternativeKeys"; type: "QVariant"; isReadonly: true }
        Property { name: "effectiveAlternativeKeysHighlightIndex"; type: "int"; isReadonly: true }
        Property { name: "key"; type: "int" }
        Property { name: "noKeyEvent"; type: "bool" }
        Property { name: "active"; type: "bool" }
        Property { name: "noModifier"; type: "bool" }
        Property { name: "repeat"; type: "bool" }
        Property { name: "highlighted"; type: "bool" }
        Property { name: "functionKey"; type: "bool" }
        Property { name: "showPreview"; type: "bool" }
        Property { name: "enabled"; type: "bool" }
        Property { name: "pressed"; type: "bool" }
        Property { name: "uppercased"; type: "bool" }
        Property { name: "soundEffect"; type: "QUrl"; isReadonly: true }
        Property { name: "keyPanelDelegate"; type: "QQmlComponent"; isPointer: true }
        Signal { name: "clicked" }
    }
    Component {
        prototype: "QQuickItem"
        name: "QtQuick.VirtualKeyboard/SpaceKey 1.0"
        exports: ["QtQuick.VirtualKeyboard/SpaceKey 1.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "weight"; type: "double" }
        Property { name: "text"; type: "string" }
        Property { name: "displayText"; type: "string" }
        Property { name: "smallText"; type: "string" }
        Property { name: "smallTextVisible"; type: "bool" }
        Property { name: "alternativeKeys"; type: "QVariant" }
        Property { name: "effectiveAlternativeKeys"; type: "QVariant"; isReadonly: true }
        Property { name: "effectiveAlternativeKeysHighlightIndex"; type: "int"; isReadonly: true }
        Property { name: "key"; type: "int" }
        Property { name: "noKeyEvent"; type: "bool" }
        Property { name: "active"; type: "bool" }
        Property { name: "noModifier"; type: "bool" }
        Property { name: "repeat"; type: "bool" }
        Property { name: "highlighted"; type: "bool" }
        Property { name: "functionKey"; type: "bool" }
        Property { name: "showPreview"; type: "bool" }
        Property { name: "enabled"; type: "bool" }
        Property { name: "pressed"; type: "bool" }
        Property { name: "uppercased"; type: "bool" }
        Property { name: "soundEffect"; type: "QUrl"; isReadonly: true }
        Property { name: "keyPanelDelegate"; type: "QQmlComponent"; isPointer: true }
        Signal { name: "clicked" }
    }
    Component {
        prototype: "QQuickItem"
        name: "QtQuick.VirtualKeyboard/SpaceKey 2.0"
        exports: ["QtQuick.VirtualKeyboard/SpaceKey 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "weight"; type: "double" }
        Property { name: "text"; type: "string" }
        Property { name: "displayText"; type: "string" }
        Property { name: "smallText"; type: "string" }
        Property { name: "smallTextVisible"; type: "bool" }
        Property { name: "alternativeKeys"; type: "QVariant" }
        Property { name: "effectiveAlternativeKeys"; type: "QVariant"; isReadonly: true }
        Property { name: "effectiveAlternativeKeysHighlightIndex"; type: "int"; isReadonly: true }
        Property { name: "key"; type: "int" }
        Property { name: "noKeyEvent"; type: "bool" }
        Property { name: "active"; type: "bool" }
        Property { name: "noModifier"; type: "bool" }
        Property { name: "repeat"; type: "bool" }
        Property { name: "highlighted"; type: "bool" }
        Property { name: "functionKey"; type: "bool" }
        Property { name: "showPreview"; type: "bool" }
        Property { name: "enabled"; type: "bool" }
        Property { name: "pressed"; type: "bool" }
        Property { name: "uppercased"; type: "bool" }
        Property { name: "soundEffect"; type: "QUrl"; isReadonly: true }
        Property { name: "keyPanelDelegate"; type: "QQmlComponent"; isPointer: true }
        Signal { name: "clicked" }
    }
    Component {
        prototype: "QQuickItem"
        name: "QtQuick.VirtualKeyboard/SymbolModeKey 1.0"
        exports: ["QtQuick.VirtualKeyboard/SymbolModeKey 1.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "weight"; type: "double" }
        Property { name: "text"; type: "string" }
        Property { name: "displayText"; type: "string" }
        Property { name: "smallText"; type: "string" }
        Property { name: "smallTextVisible"; type: "bool" }
        Property { name: "alternativeKeys"; type: "QVariant" }
        Property { name: "effectiveAlternativeKeys"; type: "QVariant"; isReadonly: true }
        Property { name: "effectiveAlternativeKeysHighlightIndex"; type: "int"; isReadonly: true }
        Property { name: "key"; type: "int" }
        Property { name: "noKeyEvent"; type: "bool" }
        Property { name: "active"; type: "bool" }
        Property { name: "noModifier"; type: "bool" }
        Property { name: "repeat"; type: "bool" }
        Property { name: "highlighted"; type: "bool" }
        Property { name: "functionKey"; type: "bool" }
        Property { name: "showPreview"; type: "bool" }
        Property { name: "enabled"; type: "bool" }
        Property { name: "pressed"; type: "bool" }
        Property { name: "uppercased"; type: "bool" }
        Property { name: "soundEffect"; type: "QUrl"; isReadonly: true }
        Property { name: "keyPanelDelegate"; type: "QQmlComponent"; isPointer: true }
        Signal { name: "clicked" }
    }
    Component {
        prototype: "QQuickItem"
        name: "QtQuick.VirtualKeyboard/SymbolModeKey 2.0"
        exports: ["QtQuick.VirtualKeyboard/SymbolModeKey 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "weight"; type: "double" }
        Property { name: "text"; type: "string" }
        Property { name: "displayText"; type: "string" }
        Property { name: "smallText"; type: "string" }
        Property { name: "smallTextVisible"; type: "bool" }
        Property { name: "alternativeKeys"; type: "QVariant" }
        Property { name: "effectiveAlternativeKeys"; type: "QVariant"; isReadonly: true }
        Property { name: "effectiveAlternativeKeysHighlightIndex"; type: "int"; isReadonly: true }
        Property { name: "key"; type: "int" }
        Property { name: "noKeyEvent"; type: "bool" }
        Property { name: "active"; type: "bool" }
        Property { name: "noModifier"; type: "bool" }
        Property { name: "repeat"; type: "bool" }
        Property { name: "highlighted"; type: "bool" }
        Property { name: "functionKey"; type: "bool" }
        Property { name: "showPreview"; type: "bool" }
        Property { name: "enabled"; type: "bool" }
        Property { name: "pressed"; type: "bool" }
        Property { name: "uppercased"; type: "bool" }
        Property { name: "soundEffect"; type: "QUrl"; isReadonly: true }
        Property { name: "keyPanelDelegate"; type: "QQmlComponent"; isPointer: true }
        Signal { name: "clicked" }
    }
    Component {
        prototype: "QQuickItem"
        name: "QtQuick.VirtualKeyboard.Styles/TraceCanvas 2.0"
        exports: ["QtQuick.VirtualKeyboard.Styles/TraceCanvas 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "trace"; type: "QVariant" }
        Property { name: "autoDestroy"; type: "bool" }
        Property { name: "autoDestroyDelay"; type: "int" }
        Property { name: "renderFunction"; type: "QVariant" }
        Property { name: "__renderPos"; type: "int" }
        Property { name: "__renderingEnabled"; type: "bool" }
        Method { name: "renderSmoothedLine"; type: "QVariant" }
        Property { name: "available"; type: "bool"; isReadonly: true }
        Property { name: "contextType"; type: "string" }
        Property { name: "context"; type: "QQmlV4Handle"; isReadonly: true }
        Property { name: "canvasSize"; type: "QSizeF" }
        Property { name: "tileSize"; type: "QSize" }
        Property { name: "canvasWindow"; type: "QRectF" }
        Property { name: "renderTarget"; type: "RenderTarget" }
        Property { name: "renderStrategy"; type: "RenderStrategy" }
        Signal {
            name: "paint"
            Parameter { name: "region"; type: "QRect" }
        }
        Signal { name: "painted" }
        Signal { name: "imageLoaded" }
        Method {
            name: "loadImage"
            Parameter { name: "url"; type: "QUrl" }
        }
        Method {
            name: "unloadImage"
            Parameter { name: "url"; type: "QUrl" }
        }
        Method {
            name: "isImageLoaded"
            type: "bool"
            Parameter { name: "url"; type: "QUrl" }
        }
        Method {
            name: "isImageLoading"
            type: "bool"
            Parameter { name: "url"; type: "QUrl" }
        }
        Method {
            name: "isImageError"
            type: "bool"
            Parameter { name: "url"; type: "QUrl" }
        }
        Method {
            name: "getContext"
            Parameter { name: "args"; type: "QQmlV4Function"; isPointer: true }
        }
        Method {
            name: "requestAnimationFrame"
            Parameter { name: "args"; type: "QQmlV4Function"; isPointer: true }
        }
        Method {
            name: "cancelRequestAnimationFrame"
            Parameter { name: "args"; type: "QQmlV4Function"; isPointer: true }
        }
        Method { name: "requestPaint" }
        Method {
            name: "markDirty"
            Parameter { name: "dirtyRect"; type: "QRectF" }
        }
        Method { name: "markDirty" }
        Method {
            name: "save"
            type: "bool"
            Parameter { name: "filename"; type: "string" }
        }
        Method {
            name: "toDataURL"
            type: "string"
            Parameter { name: "type"; type: "string" }
        }
        Method { name: "toDataURL"; type: "string" }
    }
    Component {
        prototype: "QQuickItem"
        name: "QtQuick.VirtualKeyboard/TraceInputArea 2.0"
        exports: ["QtQuick.VirtualKeyboard/TraceInputArea 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "patternRecognitionMode"; type: "int" }
        Property { name: "horizontalRulers"; type: "QVariant" }
        Property { name: "verticalRulers"; type: "QVariant" }
        Property { name: "boundingBox"; type: "QRectF"; isReadonly: true }
        Property { name: "canvasType"; type: "string" }
        Property { name: "__traceCanvasList"; type: "QVariant" }
        Property { name: "__traceCaptureDeviceInfo"; type: "QVariant" }
        Property { name: "__traceScreenInfo"; type: "QVariant" }
        Method {
            name: "findTraceCanvasById"
            type: "QVariant"
            Parameter { name: "traceId"; type: "QVariant" }
        }
        Property { name: "touchPoints"; type: "QQuickTouchPoint"; isList: true; isReadonly: true }
        Property { name: "minimumTouchPoints"; type: "int" }
        Property { name: "maximumTouchPoints"; type: "int" }
        Property { name: "mouseEnabled"; type: "bool" }
        Signal {
            name: "pressed"
            Parameter { name: "touchPoints"; type: "QList<QObject*>" }
        }
        Signal {
            name: "updated"
            Parameter { name: "touchPoints"; type: "QList<QObject*>" }
        }
        Signal {
            name: "released"
            Parameter { name: "touchPoints"; type: "QList<QObject*>" }
        }
        Signal {
            name: "canceled"
            Parameter { name: "touchPoints"; type: "QList<QObject*>" }
        }
        Signal {
            name: "gestureStarted"
            Parameter { name: "gesture"; type: "QQuickGrabGestureEvent"; isPointer: true }
        }
        Signal {
            name: "touchUpdated"
            Parameter { name: "touchPoints"; type: "QList<QObject*>" }
        }
    }
    Component {
        prototype: "QQuickItem"
        name: "QtQuick.VirtualKeyboard/TraceInputKey 2.0"
        exports: ["QtQuick.VirtualKeyboard/TraceInputKey 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "weight"; type: "double" }
        Property { name: "patternRecognitionMode"; type: "int" }
        Property { name: "horizontalRulers"; type: "QVariant" }
        Property { name: "verticalRulers"; type: "QVariant" }
        Property { name: "boundingBox"; type: "QRectF"; isReadonly: true }
        Property { name: "canvasType"; type: "string" }
    }
    Component {
        prototype: "QQuickItem"
        name: "QtQuick.VirtualKeyboard.Styles/TraceInputKeyPanel 2.0"
        exports: ["QtQuick.VirtualKeyboard.Styles/TraceInputKeyPanel 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "control"; type: "QQuickItem"; isPointer: true }
        Property { name: "traceMargins"; type: "double" }
    }
    Component {
        prototype: "QQuickItem"
        name: "QtQuick.VirtualKeyboard/WordCandidatePopupList 2.0"
        exports: ["QtQuick.VirtualKeyboard/WordCandidatePopupList 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "maxVisibleItems"; type: "int" }
        Property { name: "preferredVisibleItems"; type: "int"; isReadonly: true }
        Property { name: "contentWidth"; type: "double"; isReadonly: true }
        Property { name: "flipVertical"; type: "bool"; isReadonly: true }
        Property { name: "highlightMoveVelocity"; type: "double" }
        Property { name: "highlightResizeVelocity"; type: "double" }
        Property { name: "highlightResizeDuration"; type: "int" }
        Property { name: "spacing"; type: "double" }
        Property { name: "orientation"; type: "Orientation" }
        Property { name: "section"; type: "QQuickViewSection"; isReadonly: true; isPointer: true }
        Property { name: "currentSection"; type: "string"; isReadonly: true }
        Property { name: "snapMode"; type: "SnapMode" }
        Property { name: "headerPositioning"; revision: 2; type: "HeaderPositioning" }
        Property { name: "footerPositioning"; revision: 2; type: "FooterPositioning" }
        Method { name: "incrementCurrentIndex" }
        Method { name: "decrementCurrentIndex" }
        Property { name: "model"; type: "QVariant" }
        Property { name: "delegate"; type: "QQmlComponent"; isPointer: true }
        Property { name: "count"; type: "int"; isReadonly: true }
        Property { name: "currentIndex"; type: "int" }
        Property { name: "currentItem"; type: "QQuickItem"; isReadonly: true; isPointer: true }
        Property { name: "keyNavigationWraps"; type: "bool" }
        Property { name: "keyNavigationEnabled"; revision: 7; type: "bool" }
        Property { name: "cacheBuffer"; type: "int" }
        Property { name: "displayMarginBeginning"; revision: 2; type: "int" }
        Property { name: "displayMarginEnd"; revision: 2; type: "int" }
        Property { name: "layoutDirection"; type: "Qt::LayoutDirection" }
        Property { name: "effectiveLayoutDirection"; type: "Qt::LayoutDirection"; isReadonly: true }
        Property { name: "verticalLayoutDirection"; type: "VerticalLayoutDirection" }
        Property { name: "header"; type: "QQmlComponent"; isPointer: true }
        Property { name: "headerItem"; type: "QQuickItem"; isReadonly: true; isPointer: true }
        Property { name: "footer"; type: "QQmlComponent"; isPointer: true }
        Property { name: "footerItem"; type: "QQuickItem"; isReadonly: true; isPointer: true }
        Property { name: "populate"; type: "QQuickTransition"; isPointer: true }
        Property { name: "add"; type: "QQuickTransition"; isPointer: true }
        Property { name: "addDisplaced"; type: "QQuickTransition"; isPointer: true }
        Property { name: "move"; type: "QQuickTransition"; isPointer: true }
        Property { name: "moveDisplaced"; type: "QQuickTransition"; isPointer: true }
        Property { name: "remove"; type: "QQuickTransition"; isPointer: true }
        Property { name: "removeDisplaced"; type: "QQuickTransition"; isPointer: true }
        Property { name: "displaced"; type: "QQuickTransition"; isPointer: true }
        Property { name: "highlight"; type: "QQmlComponent"; isPointer: true }
        Property { name: "highlightItem"; type: "QQuickItem"; isReadonly: true; isPointer: true }
        Property { name: "highlightFollowsCurrentItem"; type: "bool" }
        Property { name: "highlightRangeMode"; type: "HighlightRangeMode" }
        Property { name: "preferredHighlightBegin"; type: "double" }
        Property { name: "preferredHighlightEnd"; type: "double" }
        Property { name: "highlightMoveDuration"; type: "int" }
        Signal { name: "populateTransitionChanged" }
        Signal { name: "addTransitionChanged" }
        Signal { name: "addDisplacedTransitionChanged" }
        Signal { name: "moveTransitionChanged" }
        Signal { name: "moveDisplacedTransitionChanged" }
        Signal { name: "removeTransitionChanged" }
        Signal { name: "removeDisplacedTransitionChanged" }
        Signal { name: "displacedTransitionChanged" }
        Method {
            name: "positionViewAtIndex"
            Parameter { name: "index"; type: "int" }
            Parameter { name: "mode"; type: "int" }
        }
        Method {
            name: "indexAt"
            type: "int"
            Parameter { name: "x"; type: "double" }
            Parameter { name: "y"; type: "double" }
        }
        Method {
            name: "itemAt"
            type: "QQuickItem*"
            Parameter { name: "x"; type: "double" }
            Parameter { name: "y"; type: "double" }
        }
        Method { name: "positionViewAtBeginning" }
        Method { name: "positionViewAtEnd" }
        Method { name: "forceLayout"; revision: 1 }
        Property { name: "contentHeight"; type: "double" }
        Property { name: "contentX"; type: "double" }
        Property { name: "contentY"; type: "double" }
        Property { name: "contentItem"; type: "QQuickItem"; isReadonly: true; isPointer: true }
        Property { name: "topMargin"; type: "double" }
        Property { name: "bottomMargin"; type: "double" }
        Property { name: "originY"; type: "double"; isReadonly: true }
        Property { name: "leftMargin"; type: "double" }
        Property { name: "rightMargin"; type: "double" }
        Property { name: "originX"; type: "double"; isReadonly: true }
        Property { name: "horizontalVelocity"; type: "double"; isReadonly: true }
        Property { name: "verticalVelocity"; type: "double"; isReadonly: true }
        Property { name: "boundsBehavior"; type: "BoundsBehavior" }
        Property { name: "rebound"; type: "QQuickTransition"; isPointer: true }
        Property { name: "maximumFlickVelocity"; type: "double" }
        Property { name: "flickDeceleration"; type: "double" }
        Property { name: "moving"; type: "bool"; isReadonly: true }
        Property { name: "movingHorizontally"; type: "bool"; isReadonly: true }
        Property { name: "movingVertically"; type: "bool"; isReadonly: true }
        Property { name: "flicking"; type: "bool"; isReadonly: true }
        Property { name: "flickingHorizontally"; type: "bool"; isReadonly: true }
        Property { name: "flickingVertically"; type: "bool"; isReadonly: true }
        Property { name: "dragging"; type: "bool"; isReadonly: true }
        Property { name: "draggingHorizontally"; type: "bool"; isReadonly: true }
        Property { name: "draggingVertically"; type: "bool"; isReadonly: true }
        Property { name: "flickableDirection"; type: "FlickableDirection" }
        Property { name: "interactive"; type: "bool" }
        Property { name: "pressDelay"; type: "int" }
        Property { name: "atXEnd"; type: "bool"; isReadonly: true }
        Property { name: "atYEnd"; type: "bool"; isReadonly: true }
        Property { name: "atXBeginning"; type: "bool"; isReadonly: true }
        Property { name: "atYBeginning"; type: "bool"; isReadonly: true }
        Property {
            name: "visibleArea"
            type: "QQuickFlickableVisibleArea"
            isReadonly: true
            isPointer: true
        }
        Property { name: "pixelAligned"; type: "bool" }
        Property { name: "flickableData"; type: "QObject"; isList: true; isReadonly: true }
        Property { name: "flickableChildren"; type: "QQuickItem"; isList: true; isReadonly: true }
        Signal { name: "isAtBoundaryChanged" }
        Signal { name: "movementStarted" }
        Signal { name: "movementEnded" }
        Signal { name: "flickStarted" }
        Signal { name: "flickEnded" }
        Signal { name: "dragStarted" }
        Signal { name: "dragEnded" }
        Method {
            name: "resizeContent"
            Parameter { name: "w"; type: "double" }
            Parameter { name: "h"; type: "double" }
            Parameter { name: "center"; type: "QPointF" }
        }
        Method { name: "returnToBounds" }
        Method {
            name: "flick"
            Parameter { name: "xVelocity"; type: "double" }
            Parameter { name: "yVelocity"; type: "double" }
        }
        Method { name: "cancelFlick" }
    }
}
