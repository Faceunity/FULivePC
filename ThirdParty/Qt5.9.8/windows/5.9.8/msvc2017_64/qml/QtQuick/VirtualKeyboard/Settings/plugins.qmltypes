import QtQuick.tooling 1.2

// This file describes the plugin-supplied types contained in the library.
// It is used for QML tooling purposes only.
//
// This file was auto-generated by:
// 'qmlplugindump -defaultplatform -nonrelocatable QtQuick.VirtualKeyboard.Settings 2.1'

Module {
    dependencies: ["QtQuick 2.8"]
    Component {
        prototype: "QQuickItem"
        name: "QtQuick.VirtualKeyboard/AlternativeKeys 2.0"
        exports: ["QtQuick.VirtualKeyboard/AlternativeKeys 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "active"; type: "bool" }
        Property { name: "highlightIndex"; type: "int" }
        Property { name: "keyCode"; type: "int" }
        Property { name: "origin"; type: "QPointF" }
        Property { name: "listView"; type: "QQuickListView"; isReadonly: true; isPointer: true }
        Signal { name: "clicked" }
        Method {
            name: "open"
            type: "QVariant"
            Parameter { name: "key"; type: "QVariant" }
            Parameter { name: "originX"; type: "QVariant" }
            Parameter { name: "originY"; type: "QVariant" }
        }
        Method {
            name: "move"
            type: "QVariant"
            Parameter { name: "mouseX"; type: "QVariant" }
        }
        Method { name: "close"; type: "QVariant" }
    }
    Component {
        prototype: "QQuickItem"
        name: "QtQuick.VirtualKeyboard/AlternativeKeys 1.0"
        exports: ["QtQuick.VirtualKeyboard/AlternativeKeys 1.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "active"; type: "bool" }
        Property { name: "highlightIndex"; type: "int" }
        Property { name: "keyCode"; type: "int" }
        Property { name: "origin"; type: "QPointF" }
        Property { name: "listView"; type: "QQuickListView"; isReadonly: true; isPointer: true }
        Signal { name: "clicked" }
        Method {
            name: "open"
            type: "QVariant"
            Parameter { name: "key"; type: "QVariant" }
            Parameter { name: "originX"; type: "QVariant" }
            Parameter { name: "originY"; type: "QVariant" }
        }
        Method {
            name: "move"
            type: "QVariant"
            Parameter { name: "mouseX"; type: "QVariant" }
        }
        Method { name: "close"; type: "QVariant" }
    }
    Component {
        prototype: "QQuickItem"
        name: "QtQuick.VirtualKeyboard/BackspaceKey 1.0"
        exports: ["QtQuick.VirtualKeyboard/BackspaceKey 1.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "weight"; type: "double" }
        Property { name: "text"; type: "string" }
        Property { name: "displayText"; type: "string" }
        Property { name: "smallText"; type: "string" }
        Property { name: "smallTextVisible"; type: "bool" }
        Property { name: "alternativeKeys"; type: "QVariant" }
        Property { name: "effectiveAlternativeKeys"; type: "QVariant"; isReadonly: true }
        Property { name: "effectiveAlternativeKeysHighlightIndex"; type: "int"; isReadonly: true }
        Property { name: "key"; type: "int" }
        Property { name: "noKeyEvent"; type: "bool" }
        Property { name: "active"; type: "bool" }
        Property { name: "noModifier"; type: "bool" }
        Property { name: "repeat"; type: "bool" }
        Property { name: "highlighted"; type: "bool" }
        Property { name: "functionKey"; type: "bool" }
        Property { name: "showPreview"; type: "bool" }
        Property { name: "pressed"; type: "bool" }
        Property { name: "uppercased"; type: "bool" }
        Property { name: "soundEffect"; type: "QUrl"; isReadonly: true }
        Property { name: "keyPanelDelegate"; type: "QQmlComponent"; isPointer: true }
        Signal { name: "clicked" }
    }
    Component {
        prototype: "QQuickItem"
        name: "QtQuick.VirtualKeyboard/BackspaceKey 2.0"
        exports: ["QtQuick.VirtualKeyboard/BackspaceKey 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "weight"; type: "double" }
        Property { name: "text"; type: "string" }
        Property { name: "displayText"; type: "string" }
        Property { name: "smallText"; type: "string" }
        Property { name: "smallTextVisible"; type: "bool" }
        Property { name: "alternativeKeys"; type: "QVariant" }
        Property { name: "effectiveAlternativeKeys"; type: "QVariant"; isReadonly: true }
        Property { name: "effectiveAlternativeKeysHighlightIndex"; type: "int"; isReadonly: true }
        Property { name: "key"; type: "int" }
        Property { name: "noKeyEvent"; type: "bool" }
        Property { name: "active"; type: "bool" }
        Property { name: "noModifier"; type: "bool" }
        Property { name: "repeat"; type: "bool" }
        Property { name: "highlighted"; type: "bool" }
        Property { name: "functionKey"; type: "bool" }
        Property { name: "showPreview"; type: "bool" }
        Property { name: "pressed"; type: "bool" }
        Property { name: "uppercased"; type: "bool" }
        Property { name: "soundEffect"; type: "QUrl"; isReadonly: true }
        Property { name: "keyPanelDelegate"; type: "QQmlComponent"; isPointer: true }
        Signal { name: "clicked" }
    }
    Component {
        prototype: "QQuickItem"
        name: "QtQuick.VirtualKeyboard/BaseKey 2.0"
        exports: ["QtQuick.VirtualKeyboard/BaseKey 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "weight"; type: "double" }
        Property { name: "text"; type: "string" }
        Property { name: "displayText"; type: "string" }
        Property { name: "smallText"; type: "string" }
        Property { name: "smallTextVisible"; type: "bool" }
        Property { name: "alternativeKeys"; type: "QVariant" }
        Property { name: "effectiveAlternativeKeys"; type: "QVariant"; isReadonly: true }
        Property { name: "effectiveAlternativeKeysHighlightIndex"; type: "int"; isReadonly: true }
        Property { name: "key"; type: "int" }
        Property { name: "noKeyEvent"; type: "bool" }
        Property { name: "active"; type: "bool" }
        Property { name: "noModifier"; type: "bool" }
        Property { name: "repeat"; type: "bool" }
        Property { name: "highlighted"; type: "bool" }
        Property { name: "functionKey"; type: "bool" }
        Property { name: "showPreview"; type: "bool" }
        Property { name: "pressed"; type: "bool" }
        Property { name: "uppercased"; type: "bool" }
        Property { name: "soundEffect"; type: "QUrl"; isReadonly: true }
        Property { name: "keyPanelDelegate"; type: "QQmlComponent"; isPointer: true }
        Signal { name: "clicked" }
    }
    Component {
        prototype: "QQuickItem"
        name: "QtQuick.VirtualKeyboard/BaseKey 1.0"
        exports: ["QtQuick.VirtualKeyboard/BaseKey 1.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "weight"; type: "double" }
        Property { name: "text"; type: "string" }
        Property { name: "displayText"; type: "string" }
        Property { name: "smallText"; type: "string" }
        Property { name: "smallTextVisible"; type: "bool" }
        Property { name: "alternativeKeys"; type: "QVariant" }
        Property { name: "effectiveAlternativeKeys"; type: "QVariant"; isReadonly: true }
        Property { name: "effectiveAlternativeKeysHighlightIndex"; type: "int"; isReadonly: true }
        Property { name: "key"; type: "int" }
        Property { name: "noKeyEvent"; type: "bool" }
        Property { name: "active"; type: "bool" }
        Property { name: "noModifier"; type: "bool" }
        Property { name: "repeat"; type: "bool" }
        Property { name: "highlighted"; type: "bool" }
        Property { name: "functionKey"; type: "bool" }
        Property { name: "showPreview"; type: "bool" }
        Property { name: "pressed"; type: "bool" }
        Property { name: "uppercased"; type: "bool" }
        Property { name: "soundEffect"; type: "QUrl"; isReadonly: true }
        Property { name: "keyPanelDelegate"; type: "QQmlComponent"; isPointer: true }
        Signal { name: "clicked" }
    }
    Component {
        prototype: "QQuickItem"
        name: "QtQuick.VirtualKeyboard/ChangeLanguageKey 1.0"
        exports: ["QtQuick.VirtualKeyboard/ChangeLanguageKey 1.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "customLayoutsOnly"; type: "bool" }
        Property { name: "weight"; type: "double" }
        Property { name: "text"; type: "string" }
        Property { name: "displayText"; type: "string" }
        Property { name: "smallText"; type: "string" }
        Property { name: "smallTextVisible"; type: "bool" }
        Property { name: "alternativeKeys"; type: "QVariant" }
        Property { name: "effectiveAlternativeKeys"; type: "QVariant"; isReadonly: true }
        Property { name: "effectiveAlternativeKeysHighlightIndex"; type: "int"; isReadonly: true }
        Property { name: "key"; type: "int" }
        Property { name: "noKeyEvent"; type: "bool" }
        Property { name: "active"; type: "bool" }
        Property { name: "noModifier"; type: "bool" }
        Property { name: "repeat"; type: "bool" }
        Property { name: "highlighted"; type: "bool" }
        Property { name: "functionKey"; type: "bool" }
        Property { name: "showPreview"; type: "bool" }
        Property { name: "pressed"; type: "bool" }
        Property { name: "uppercased"; type: "bool" }
        Property { name: "soundEffect"; type: "QUrl"; isReadonly: true }
        Property { name: "keyPanelDelegate"; type: "QQmlComponent"; isPointer: true }
        Signal { name: "clicked" }
    }
    Component {
        prototype: "QQuickItem"
        name: "QtQuick.VirtualKeyboard/ChangeLanguageKey 2.0"
        exports: ["QtQuick.VirtualKeyboard/ChangeLanguageKey 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "customLayoutsOnly"; type: "bool" }
        Property { name: "weight"; type: "double" }
        Property { name: "text"; type: "string" }
        Property { name: "displayText"; type: "string" }
        Property { name: "smallText"; type: "string" }
        Property { name: "smallTextVisible"; type: "bool" }
        Property { name: "alternativeKeys"; type: "QVariant" }
        Property { name: "effectiveAlternativeKeys"; type: "QVariant"; isReadonly: true }
        Property { name: "effectiveAlternativeKeysHighlightIndex"; type: "int"; isReadonly: true }
        Property { name: "key"; type: "int" }
        Property { name: "noKeyEvent"; type: "bool" }
        Property { name: "active"; type: "bool" }
        Property { name: "noModifier"; type: "bool" }
        Property { name: "repeat"; type: "bool" }
        Property { name: "highlighted"; type: "bool" }
        Property { name: "functionKey"; type: "bool" }
        Property { name: "showPreview"; type: "bool" }
        Property { name: "pressed"; type: "bool" }
        Property { name: "uppercased"; type: "bool" }
        Property { name: "soundEffect"; type: "QUrl"; isReadonly: true }
        Property { name: "keyPanelDelegate"; type: "QQmlComponent"; isPointer: true }
        Signal { name: "clicked" }
    }
    Component {
        prototype: "QQuickItem"
        name: "QtQuick.VirtualKeyboard/CharacterPreviewBubble 1.0"
        exports: ["QtQuick.VirtualKeyboard/CharacterPreviewBubble 1.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "active"; type: "bool" }
        Property { name: "activeKey"; type: "QVariant" }
    }
    Component {
        prototype: "QQuickItem"
        name: "QtQuick.VirtualKeyboard/CharacterPreviewBubble 2.0"
        exports: ["QtQuick.VirtualKeyboard/CharacterPreviewBubble 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "active"; type: "bool" }
        Property { name: "activeKey"; type: "QVariant" }
    }
    Component {
        prototype: "QQuickItem"
        name: "QtQuick.VirtualKeyboard/EnterKey 1.0"
        exports: ["QtQuick.VirtualKeyboard/EnterKey 1.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "actionId"; type: "int"; isReadonly: true }
        Property { name: "weight"; type: "double" }
        Property { name: "text"; type: "string" }
        Property { name: "displayText"; type: "string" }
        Property { name: "smallText"; type: "string" }
        Property { name: "smallTextVisible"; type: "bool" }
        Property { name: "alternativeKeys"; type: "QVariant" }
        Property { name: "effectiveAlternativeKeys"; type: "QVariant"; isReadonly: true }
        Property { name: "effectiveAlternativeKeysHighlightIndex"; type: "int"; isReadonly: true }
        Property { name: "key"; type: "int" }
        Property { name: "noKeyEvent"; type: "bool" }
        Property { name: "active"; type: "bool" }
        Property { name: "noModifier"; type: "bool" }
        Property { name: "repeat"; type: "bool" }
        Property { name: "highlighted"; type: "bool" }
        Property { name: "functionKey"; type: "bool" }
        Property { name: "showPreview"; type: "bool" }
        Property { name: "pressed"; type: "bool" }
        Property { name: "uppercased"; type: "bool" }
        Property { name: "soundEffect"; type: "QUrl"; isReadonly: true }
        Property { name: "keyPanelDelegate"; type: "QQmlComponent"; isPointer: true }
        Signal { name: "clicked" }
    }
    Component {
        prototype: "QQuickItem"
        name: "QtQuick.VirtualKeyboard/EnterKey 2.0"
        exports: ["QtQuick.VirtualKeyboard/EnterKey 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "actionId"; type: "int"; isReadonly: true }
        Property { name: "weight"; type: "double" }
        Property { name: "text"; type: "string" }
        Property { name: "displayText"; type: "string" }
        Property { name: "smallText"; type: "string" }
        Property { name: "smallTextVisible"; type: "bool" }
        Property { name: "alternativeKeys"; type: "QVariant" }
        Property { name: "effectiveAlternativeKeys"; type: "QVariant"; isReadonly: true }
        Property { name: "effectiveAlternativeKeysHighlightIndex"; type: "int"; isReadonly: true }
        Property { name: "key"; type: "int" }
        Property { name: "noKeyEvent"; type: "bool" }
        Property { name: "active"; type: "bool" }
        Property { name: "noModifier"; type: "bool" }
        Property { name: "repeat"; type: "bool" }
        Property { name: "highlighted"; type: "bool" }
        Property { name: "functionKey"; type: "bool" }
        Property { name: "showPreview"; type: "bool" }
        Property { name: "pressed"; type: "bool" }
        Property { name: "uppercased"; type: "bool" }
        Property { name: "soundEffect"; type: "QUrl"; isReadonly: true }
        Property { name: "keyPanelDelegate"; type: "QQmlComponent"; isPointer: true }
        Signal { name: "clicked" }
    }
    Component {
        prototype: "QQuickItem"
        name: "QtQuick.VirtualKeyboard/FillerKey 2.0"
        exports: ["QtQuick.VirtualKeyboard/FillerKey 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "weight"; type: "double" }
        Property { name: "text"; type: "string" }
        Property { name: "displayText"; type: "string" }
        Property { name: "smallText"; type: "string" }
        Property { name: "smallTextVisible"; type: "bool" }
        Property { name: "alternativeKeys"; type: "QVariant" }
        Property { name: "effectiveAlternativeKeys"; type: "QVariant"; isReadonly: true }
        Property { name: "effectiveAlternativeKeysHighlightIndex"; type: "int"; isReadonly: true }
        Property { name: "key"; type: "int" }
        Property { name: "noKeyEvent"; type: "bool" }
        Property { name: "active"; type: "bool" }
        Property { name: "noModifier"; type: "bool" }
        Property { name: "repeat"; type: "bool" }
        Property { name: "highlighted"; type: "bool" }
        Property { name: "functionKey"; type: "bool" }
        Property { name: "showPreview"; type: "bool" }
        Property { name: "pressed"; type: "bool" }
        Property { name: "uppercased"; type: "bool" }
        Property { name: "soundEffect"; type: "QUrl"; isReadonly: true }
        Property { name: "keyPanelDelegate"; type: "QQmlComponent"; isPointer: true }
        Signal { name: "clicked" }
    }
    Component {
        prototype: "QQuickItem"
        name: "QtQuick.VirtualKeyboard/FillerKey 1.0"
        exports: ["QtQuick.VirtualKeyboard/FillerKey 1.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "weight"; type: "double" }
        Property { name: "text"; type: "string" }
        Property { name: "displayText"; type: "string" }
        Property { name: "smallText"; type: "string" }
        Property { name: "smallTextVisible"; type: "bool" }
        Property { name: "alternativeKeys"; type: "QVariant" }
        Property { name: "effectiveAlternativeKeys"; type: "QVariant"; isReadonly: true }
        Property { name: "effectiveAlternativeKeysHighlightIndex"; type: "int"; isReadonly: true }
        Property { name: "key"; type: "int" }
        Property { name: "noKeyEvent"; type: "bool" }
        Property { name: "active"; type: "bool" }
        Property { name: "noModifier"; type: "bool" }
        Property { name: "repeat"; type: "bool" }
        Property { name: "highlighted"; type: "bool" }
        Property { name: "functionKey"; type: "bool" }
        Property { name: "showPreview"; type: "bool" }
        Property { name: "pressed"; type: "bool" }
        Property { name: "uppercased"; type: "bool" }
        Property { name: "soundEffect"; type: "QUrl"; isReadonly: true }
        Property { name: "keyPanelDelegate"; type: "QQmlComponent"; isPointer: true }
        Signal { name: "clicked" }
    }
    Component {
        prototype: "QQuickItem"
        name: "QtQuick.VirtualKeyboard/HandwritingInputPanel 2.0"
        exports: ["QtQuick.VirtualKeyboard/HandwritingInputPanel 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "inputPanel"; type: "QVariant" }
        Property { name: "available"; type: "bool" }
        Property { name: "active"; type: "bool" }
    }
    Component {
        prototype: "QQuickItem"
        name: "QtQuick.VirtualKeyboard/HandwritingModeKey 2.0"
        exports: ["QtQuick.VirtualKeyboard/HandwritingModeKey 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "weight"; type: "double" }
        Property { name: "text"; type: "string" }
        Property { name: "displayText"; type: "string" }
        Property { name: "smallText"; type: "string" }
        Property { name: "smallTextVisible"; type: "bool" }
        Property { name: "alternativeKeys"; type: "QVariant" }
        Property { name: "effectiveAlternativeKeys"; type: "QVariant"; isReadonly: true }
        Property { name: "effectiveAlternativeKeysHighlightIndex"; type: "int"; isReadonly: true }
        Property { name: "key"; type: "int" }
        Property { name: "noKeyEvent"; type: "bool" }
        Property { name: "active"; type: "bool" }
        Property { name: "noModifier"; type: "bool" }
        Property { name: "repeat"; type: "bool" }
        Property { name: "highlighted"; type: "bool" }
        Property { name: "functionKey"; type: "bool" }
        Property { name: "showPreview"; type: "bool" }
        Property { name: "pressed"; type: "bool" }
        Property { name: "uppercased"; type: "bool" }
        Property { name: "soundEffect"; type: "QUrl"; isReadonly: true }
        Property { name: "keyPanelDelegate"; type: "QQmlComponent"; isPointer: true }
        Signal { name: "clicked" }
    }
    Component {
        prototype: "QQuickItem"
        name: "QtQuick.VirtualKeyboard/HideKeyboardKey 2.0"
        exports: ["QtQuick.VirtualKeyboard/HideKeyboardKey 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "weight"; type: "double" }
        Property { name: "text"; type: "string" }
        Property { name: "displayText"; type: "string" }
        Property { name: "smallText"; type: "string" }
        Property { name: "smallTextVisible"; type: "bool" }
        Property { name: "alternativeKeys"; type: "QVariant" }
        Property { name: "effectiveAlternativeKeys"; type: "QVariant"; isReadonly: true }
        Property { name: "effectiveAlternativeKeysHighlightIndex"; type: "int"; isReadonly: true }
        Property { name: "key"; type: "int" }
        Property { name: "noKeyEvent"; type: "bool" }
        Property { name: "active"; type: "bool" }
        Property { name: "noModifier"; type: "bool" }
        Property { name: "repeat"; type: "bool" }
        Property { name: "highlighted"; type: "bool" }
        Property { name: "functionKey"; type: "bool" }
        Property { name: "showPreview"; type: "bool" }
        Property { name: "pressed"; type: "bool" }
        Property { name: "uppercased"; type: "bool" }
        Property { name: "soundEffect"; type: "QUrl"; isReadonly: true }
        Property { name: "keyPanelDelegate"; type: "QQmlComponent"; isPointer: true }
        Signal { name: "clicked" }
    }
    Component {
        prototype: "QQuickItem"
        name: "QtQuick.VirtualKeyboard/HideKeyboardKey 1.0"
        exports: ["QtQuick.VirtualKeyboard/HideKeyboardKey 1.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "weight"; type: "double" }
        Property { name: "text"; type: "string" }
        Property { name: "displayText"; type: "string" }
        Property { name: "smallText"; type: "string" }
        Property { name: "smallTextVisible"; type: "bool" }
        Property { name: "alternativeKeys"; type: "QVariant" }
        Property { name: "effectiveAlternativeKeys"; type: "QVariant"; isReadonly: true }
        Property { name: "effectiveAlternativeKeysHighlightIndex"; type: "int"; isReadonly: true }
        Property { name: "key"; type: "int" }
        Property { name: "noKeyEvent"; type: "bool" }
        Property { name: "active"; type: "bool" }
        Property { name: "noModifier"; type: "bool" }
        Property { name: "repeat"; type: "bool" }
        Property { name: "highlighted"; type: "bool" }
        Property { name: "functionKey"; type: "bool" }
        Property { name: "showPreview"; type: "bool" }
        Property { name: "pressed"; type: "bool" }
        Property { name: "uppercased"; type: "bool" }
        Property { name: "soundEffect"; type: "QUrl"; isReadonly: true }
        Property { name: "keyPanelDelegate"; type: "QQmlComponent"; isPointer: true }
        Signal { name: "clicked" }
    }
    Component {
        prototype: "QQuickItem"
        name: "QtQuick.VirtualKeyboard/InputPanel 1.3"
        exports: ["QtQuick.VirtualKeyboard/InputPanel 1.3"]
        exportMetaObjectRevisions: [3]
        isComposite: true
        defaultProperty: "data"
        Property { name: "active"; type: "bool" }
        Property { name: "keyboard"; type: "Keyboard_QMLTYPE_15"; isReadonly: true; isPointer: true }
    }
    Component {
        prototype: "QQuickItem"
        name: "QtQuick.VirtualKeyboard/InputPanel 2.2"
        exports: ["QtQuick.VirtualKeyboard/InputPanel 2.2"]
        exportMetaObjectRevisions: [2]
        isComposite: true
        defaultProperty: "data"
        Property { name: "active"; type: "bool" }
        Property { name: "keyboard"; type: "Keyboard_QMLTYPE_15"; isReadonly: true; isPointer: true }
    }
    Component {
        prototype: "QQuickItem"
        name: "QtQuick.VirtualKeyboard/InputPanel 2.1"
        exports: ["QtQuick.VirtualKeyboard/InputPanel 2.1"]
        exportMetaObjectRevisions: [1]
        isComposite: true
        defaultProperty: "data"
        Property { name: "active"; type: "bool" }
        Property { name: "keyboard"; type: "Keyboard_QMLTYPE_15"; isReadonly: true; isPointer: true }
    }
    Component {
        prototype: "QQuickItem"
        name: "QtQuick.VirtualKeyboard/InputPanel 1.0"
        exports: ["QtQuick.VirtualKeyboard/InputPanel 1.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "active"; type: "bool" }
        Property { name: "keyboard"; type: "Keyboard_QMLTYPE_15"; isReadonly: true; isPointer: true }
    }
    Component {
        prototype: "QQuickItem"
        name: "QtQuick.VirtualKeyboard/InputPanel 2.0"
        exports: ["QtQuick.VirtualKeyboard/InputPanel 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "active"; type: "bool" }
        Property { name: "keyboard"; type: "Keyboard_QMLTYPE_15"; isReadonly: true; isPointer: true }
    }
    Component {
        prototype: "QQuickItem"
        name: "QtQuick.VirtualKeyboard/InputPanel 1.2"
        exports: ["QtQuick.VirtualKeyboard/InputPanel 1.2"]
        exportMetaObjectRevisions: [2]
        isComposite: true
        defaultProperty: "data"
        Property { name: "active"; type: "bool" }
        Property { name: "keyboard"; type: "Keyboard_QMLTYPE_15"; isReadonly: true; isPointer: true }
    }
    Component {
        prototype: "QQuickItem"
        name: "QtQuick.VirtualKeyboard/Key 1.0"
        exports: ["QtQuick.VirtualKeyboard/Key 1.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "weight"; type: "double" }
        Property { name: "text"; type: "string" }
        Property { name: "displayText"; type: "string" }
        Property { name: "smallText"; type: "string" }
        Property { name: "smallTextVisible"; type: "bool" }
        Property { name: "alternativeKeys"; type: "QVariant" }
        Property { name: "effectiveAlternativeKeys"; type: "QVariant"; isReadonly: true }
        Property { name: "effectiveAlternativeKeysHighlightIndex"; type: "int"; isReadonly: true }
        Property { name: "key"; type: "int" }
        Property { name: "noKeyEvent"; type: "bool" }
        Property { name: "active"; type: "bool" }
        Property { name: "noModifier"; type: "bool" }
        Property { name: "repeat"; type: "bool" }
        Property { name: "highlighted"; type: "bool" }
        Property { name: "functionKey"; type: "bool" }
        Property { name: "showPreview"; type: "bool" }
        Property { name: "pressed"; type: "bool" }
        Property { name: "uppercased"; type: "bool" }
        Property { name: "soundEffect"; type: "QUrl"; isReadonly: true }
        Property { name: "keyPanelDelegate"; type: "QQmlComponent"; isPointer: true }
        Signal { name: "clicked" }
    }
    Component {
        prototype: "QQuickItem"
        name: "QtQuick.VirtualKeyboard/Key 2.0"
        exports: ["QtQuick.VirtualKeyboard/Key 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "weight"; type: "double" }
        Property { name: "text"; type: "string" }
        Property { name: "displayText"; type: "string" }
        Property { name: "smallText"; type: "string" }
        Property { name: "smallTextVisible"; type: "bool" }
        Property { name: "alternativeKeys"; type: "QVariant" }
        Property { name: "effectiveAlternativeKeys"; type: "QVariant"; isReadonly: true }
        Property { name: "effectiveAlternativeKeysHighlightIndex"; type: "int"; isReadonly: true }
        Property { name: "key"; type: "int" }
        Property { name: "noKeyEvent"; type: "bool" }
        Property { name: "active"; type: "bool" }
        Property { name: "noModifier"; type: "bool" }
        Property { name: "repeat"; type: "bool" }
        Property { name: "highlighted"; type: "bool" }
        Property { name: "functionKey"; type: "bool" }
        Property { name: "showPreview"; type: "bool" }
        Property { name: "pressed"; type: "bool" }
        Property { name: "uppercased"; type: "bool" }
        Property { name: "soundEffect"; type: "QUrl"; isReadonly: true }
        Property { name: "keyPanelDelegate"; type: "QQmlComponent"; isPointer: true }
        Signal { name: "clicked" }
    }
    Component {
        prototype: "QQuickItem"
        name: "QtQuick.VirtualKeyboard/Keyboard 2.0"
        exports: ["QtQuick.VirtualKeyboard/Keyboard 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "activeKey"; type: "QVariant" }
        Property { name: "activeTouchPoint"; type: "QQuickTouchPoint"; isPointer: true }
        Property { name: "localeIndex"; type: "int" }
        Property { name: "availableLocaleIndices"; type: "QVariant" }
        Property { name: "availableCustomLocaleIndices"; type: "QVariant" }
        Property { name: "locale"; type: "string" }
        Property { name: "inputLocale"; type: "string" }
        Property { name: "defaultLocaleIndex"; type: "int" }
        Property { name: "latinOnly"; type: "bool" }
        Property { name: "preferNumbers"; type: "bool" }
        Property { name: "layout"; type: "string" }
        Property { name: "layoutType"; type: "string" }
        Property { name: "active"; type: "bool" }
        Property { name: "handwritingMode"; type: "bool" }
        Property { name: "fullScreenHandwritingMode"; type: "bool" }
        Property { name: "symbolMode"; type: "bool" }
        Property { name: "fullScreenMode"; type: "bool" }
        Property { name: "defaultInputMethod"; type: "QVariant" }
        Property { name: "plainInputMethod"; type: "QVariant" }
        Property { name: "customInputMethod"; type: "QVariant" }
        Property { name: "customInputMethodSharedLayouts"; type: "QVariant" }
        Property { name: "defaultInputMode"; type: "int" }
        Property { name: "inputMethodNeedsReset"; type: "bool" }
        Property { name: "inputModeNeedsReset"; type: "bool" }
        Property { name: "navigationModeActive"; type: "bool" }
        Property { name: "languagePopupListActive"; type: "bool"; isReadonly: true }
        Property { name: "style"; type: "QObject"; isReadonly: true; isPointer: true }
        Property { name: "soundEffect"; type: "QQuickItem"; isReadonly: true; isPointer: true }
        Method { name: "initDefaultInputMethod"; type: "QVariant" }
        Method {
            name: "showLanguagePopup"
            type: "QVariant"
            Parameter { name: "parentItem"; type: "QVariant" }
            Parameter { name: "customLayoutsOnly"; type: "QVariant" }
        }
        Method { name: "hideLanguagePopup"; type: "QVariant" }
        Method { name: "updateInputMethod"; type: "QVariant" }
        Method { name: "updateLayout"; type: "QVariant" }
        Method { name: "updateDefaultLocale"; type: "QVariant" }
        Method { name: "updateAvailableLocaleIndices"; type: "QVariant" }
        Method {
            name: "listLocales"
            type: "QVariant"
            Parameter { name: "customLayoutsOnly"; type: "QVariant" }
        }
        Method {
            name: "nextLocaleIndex"
            type: "QVariant"
            Parameter { name: "customLayoutsOnly"; type: "QVariant" }
        }
        Method {
            name: "changeInputLanguage"
            type: "QVariant"
            Parameter { name: "customLayoutsOnly"; type: "QVariant" }
        }
        Method {
            name: "canChangeInputLanguage"
            type: "QVariant"
            Parameter { name: "customLayoutsOnly"; type: "QVariant" }
        }
        Method {
            name: "findLocale"
            type: "QVariant"
            Parameter { name: "localeName"; type: "QVariant" }
            Parameter { name: "defaultValue"; type: "QVariant" }
        }
        Method {
            name: "isValidLocale"
            type: "QVariant"
            Parameter { name: "localeNameOrIndex"; type: "QVariant" }
        }
        Method {
            name: "getLayoutFile"
            type: "QVariant"
            Parameter { name: "localeName"; type: "QVariant" }
            Parameter { name: "layoutType"; type: "QVariant" }
        }
        Method {
            name: "layoutExists"
            type: "QVariant"
            Parameter { name: "localeName"; type: "QVariant" }
            Parameter { name: "layoutType"; type: "QVariant" }
        }
        Method {
            name: "findLayout"
            type: "QVariant"
            Parameter { name: "localeName"; type: "QVariant" }
            Parameter { name: "layoutType"; type: "QVariant" }
        }
        Method { name: "isHandwritingAvailable"; type: "QVariant" }
    }
    Component {
        prototype: "QQuickItem"
        name: "QtQuick.VirtualKeyboard/Keyboard 1.0"
        exports: ["QtQuick.VirtualKeyboard/Keyboard 1.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "activeKey"; type: "QVariant" }
        Property { name: "activeTouchPoint"; type: "QQuickTouchPoint"; isPointer: true }
        Property { name: "localeIndex"; type: "int" }
        Property { name: "availableLocaleIndices"; type: "QVariant" }
        Property { name: "availableCustomLocaleIndices"; type: "QVariant" }
        Property { name: "locale"; type: "string" }
        Property { name: "inputLocale"; type: "string" }
        Property { name: "defaultLocaleIndex"; type: "int" }
        Property { name: "latinOnly"; type: "bool" }
        Property { name: "preferNumbers"; type: "bool" }
        Property { name: "layout"; type: "string" }
        Property { name: "layoutType"; type: "string" }
        Property { name: "active"; type: "bool" }
        Property { name: "handwritingMode"; type: "bool" }
        Property { name: "fullScreenHandwritingMode"; type: "bool" }
        Property { name: "symbolMode"; type: "bool" }
        Property { name: "fullScreenMode"; type: "bool" }
        Property { name: "defaultInputMethod"; type: "QVariant" }
        Property { name: "plainInputMethod"; type: "QVariant" }
        Property { name: "customInputMethod"; type: "QVariant" }
        Property { name: "customInputMethodSharedLayouts"; type: "QVariant" }
        Property { name: "defaultInputMode"; type: "int" }
        Property { name: "inputMethodNeedsReset"; type: "bool" }
        Property { name: "inputModeNeedsReset"; type: "bool" }
        Property { name: "navigationModeActive"; type: "bool" }
        Property { name: "languagePopupListActive"; type: "bool"; isReadonly: true }
        Property { name: "style"; type: "QObject"; isReadonly: true; isPointer: true }
        Property { name: "soundEffect"; type: "QQuickItem"; isReadonly: true; isPointer: true }
        Method { name: "initDefaultInputMethod"; type: "QVariant" }
        Method {
            name: "showLanguagePopup"
            type: "QVariant"
            Parameter { name: "parentItem"; type: "QVariant" }
            Parameter { name: "customLayoutsOnly"; type: "QVariant" }
        }
        Method { name: "hideLanguagePopup"; type: "QVariant" }
        Method { name: "updateInputMethod"; type: "QVariant" }
        Method { name: "updateLayout"; type: "QVariant" }
        Method { name: "updateDefaultLocale"; type: "QVariant" }
        Method { name: "updateAvailableLocaleIndices"; type: "QVariant" }
        Method {
            name: "listLocales"
            type: "QVariant"
            Parameter { name: "customLayoutsOnly"; type: "QVariant" }
        }
        Method {
            name: "nextLocaleIndex"
            type: "QVariant"
            Parameter { name: "customLayoutsOnly"; type: "QVariant" }
        }
        Method {
            name: "changeInputLanguage"
            type: "QVariant"
            Parameter { name: "customLayoutsOnly"; type: "QVariant" }
        }
        Method {
            name: "canChangeInputLanguage"
            type: "QVariant"
            Parameter { name: "customLayoutsOnly"; type: "QVariant" }
        }
        Method {
            name: "findLocale"
            type: "QVariant"
            Parameter { name: "localeName"; type: "QVariant" }
            Parameter { name: "defaultValue"; type: "QVariant" }
        }
        Method {
            name: "isValidLocale"
            type: "QVariant"
            Parameter { name: "localeNameOrIndex"; type: "QVariant" }
        }
        Method {
            name: "getLayoutFile"
            type: "QVariant"
            Parameter { name: "localeName"; type: "QVariant" }
            Parameter { name: "layoutType"; type: "QVariant" }
        }
        Method {
            name: "layoutExists"
            type: "QVariant"
            Parameter { name: "localeName"; type: "QVariant" }
            Parameter { name: "layoutType"; type: "QVariant" }
        }
        Method {
            name: "findLayout"
            type: "QVariant"
            Parameter { name: "localeName"; type: "QVariant" }
            Parameter { name: "layoutType"; type: "QVariant" }
        }
        Method { name: "isHandwritingAvailable"; type: "QVariant" }
    }
    Component {
        prototype: "QQuickItem"
        name: "QtQuick.VirtualKeyboard/KeyboardColumn 1.0"
        exports: ["QtQuick.VirtualKeyboard/KeyboardColumn 1.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "keyWeight"; type: "double" }
        Property { name: "smallTextVisible"; type: "bool" }
        Property { name: "spacing"; type: "double" }
        Property { name: "layoutDirection"; revision: 1; type: "Qt::LayoutDirection" }
    }
    Component {
        prototype: "QQuickItem"
        name: "QtQuick.VirtualKeyboard/KeyboardColumn 2.0"
        exports: ["QtQuick.VirtualKeyboard/KeyboardColumn 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "keyWeight"; type: "double" }
        Property { name: "smallTextVisible"; type: "bool" }
        Property { name: "spacing"; type: "double" }
        Property { name: "layoutDirection"; revision: 1; type: "Qt::LayoutDirection" }
    }
    Component {
        prototype: "QQuickItem"
        name: "QtQuick.VirtualKeyboard/KeyboardLayout 2.0"
        exports: ["QtQuick.VirtualKeyboard/KeyboardLayout 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "inputMethod"; type: "QVariant" }
        Property { name: "sharedLayouts"; type: "QVariant" }
        Property { name: "inputMode"; type: "int" }
        Property { name: "keyWeight"; type: "double" }
        Property { name: "smallTextVisible"; type: "bool" }
        Method { name: "createInputMethod"; type: "QVariant" }
        Property { name: "spacing"; type: "double" }
        Property { name: "layoutDirection"; revision: 1; type: "Qt::LayoutDirection" }
    }
    Component {
        prototype: "QQuickItem"
        name: "QtQuick.VirtualKeyboard/KeyboardLayout 1.0"
        exports: ["QtQuick.VirtualKeyboard/KeyboardLayout 1.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "inputMethod"; type: "QVariant" }
        Property { name: "sharedLayouts"; type: "QVariant" }
        Property { name: "inputMode"; type: "int" }
        Property { name: "keyWeight"; type: "double" }
        Property { name: "smallTextVisible"; type: "bool" }
        Method { name: "createInputMethod"; type: "QVariant" }
        Property { name: "spacing"; type: "double" }
        Property { name: "layoutDirection"; revision: 1; type: "Qt::LayoutDirection" }
    }
    Component {
        prototype: "QQuickLoader"
        name: "QtQuick.VirtualKeyboard/KeyboardLayoutLoader 2.0"
        exports: ["QtQuick.VirtualKeyboard/KeyboardLayoutLoader 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "inputMethod"; type: "QVariant" }
        Property { name: "sharedLayouts"; type: "QVariant" }
        Property { name: "inputMode"; type: "int" }
        Property { name: "__updateCount"; type: "int" }
        Method { name: "createInputMethod"; type: "QVariant" }
    }
    Component {
        prototype: "QQuickLoader"
        name: "QtQuick.VirtualKeyboard/KeyboardLayoutLoader 1.1"
        exports: ["QtQuick.VirtualKeyboard/KeyboardLayoutLoader 1.1"]
        exportMetaObjectRevisions: [1]
        isComposite: true
        defaultProperty: "data"
        Property { name: "inputMethod"; type: "QVariant" }
        Property { name: "sharedLayouts"; type: "QVariant" }
        Property { name: "inputMode"; type: "int" }
        Property { name: "__updateCount"; type: "int" }
        Method { name: "createInputMethod"; type: "QVariant" }
    }
    Component {
        prototype: "QQuickItem"
        name: "QtQuick.VirtualKeyboard/KeyboardRow 2.0"
        exports: ["QtQuick.VirtualKeyboard/KeyboardRow 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "keyWeight"; type: "double" }
        Property { name: "smallTextVisible"; type: "bool" }
        Property { name: "spacing"; type: "double" }
        Property { name: "layoutDirection"; revision: 1; type: "Qt::LayoutDirection" }
    }
    Component {
        prototype: "QQuickItem"
        name: "QtQuick.VirtualKeyboard/KeyboardRow 1.0"
        exports: ["QtQuick.VirtualKeyboard/KeyboardRow 1.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "keyWeight"; type: "double" }
        Property { name: "smallTextVisible"; type: "bool" }
        Property { name: "spacing"; type: "double" }
        Property { name: "layoutDirection"; revision: 1; type: "Qt::LayoutDirection" }
    }
    Component {
        prototype: "QQuickListView"
        name: "QtQuick.VirtualKeyboard/LanguagePopupList 2.1"
        exports: ["QtQuick.VirtualKeyboard/LanguagePopupList 2.1"]
        exportMetaObjectRevisions: [1]
        isComposite: true
        defaultProperty: "data"
        Property { name: "maxVisibleItems"; type: "int" }
        Property { name: "preferredVisibleItems"; type: "int"; isReadonly: true }
        Property { name: "contentWidth"; type: "double"; isReadonly: true }
    }
    Component {
        prototype: "QQuickItem"
        name: "QtQuick.VirtualKeyboard/ModeKey 2.0"
        exports: ["QtQuick.VirtualKeyboard/ModeKey 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "mode"; type: "bool" }
        Property { name: "weight"; type: "double" }
        Property { name: "text"; type: "string" }
        Property { name: "displayText"; type: "string" }
        Property { name: "smallText"; type: "string" }
        Property { name: "smallTextVisible"; type: "bool" }
        Property { name: "alternativeKeys"; type: "QVariant" }
        Property { name: "effectiveAlternativeKeys"; type: "QVariant"; isReadonly: true }
        Property { name: "effectiveAlternativeKeysHighlightIndex"; type: "int"; isReadonly: true }
        Property { name: "key"; type: "int" }
        Property { name: "noKeyEvent"; type: "bool" }
        Property { name: "active"; type: "bool" }
        Property { name: "noModifier"; type: "bool" }
        Property { name: "repeat"; type: "bool" }
        Property { name: "highlighted"; type: "bool" }
        Property { name: "functionKey"; type: "bool" }
        Property { name: "showPreview"; type: "bool" }
        Property { name: "pressed"; type: "bool" }
        Property { name: "uppercased"; type: "bool" }
        Property { name: "soundEffect"; type: "QUrl"; isReadonly: true }
        Property { name: "keyPanelDelegate"; type: "QQmlComponent"; isPointer: true }
        Signal { name: "clicked" }
    }
    Component {
        prototype: "QtVirtualKeyboard::InputMethod"
        name: "QtQuick.VirtualKeyboard/MultitapInputMethod 2.0"
        exports: ["QtQuick.VirtualKeyboard/MultitapInputMethod 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        Property { name: "multitapSequence"; type: "string" }
        Property { name: "multitapIndex"; type: "int" }
        Property { name: "multiTapTimer"; type: "QVariant" }
        Method {
            name: "inputModes"
            type: "QVariant"
            Parameter { name: "locale"; type: "QVariant" }
        }
        Method {
            name: "setInputMode"
            type: "QVariant"
            Parameter { name: "locale"; type: "QVariant" }
            Parameter { name: "inputMode"; type: "QVariant" }
        }
        Method {
            name: "setTextCase"
            type: "QVariant"
            Parameter { name: "textCase"; type: "QVariant" }
        }
        Method { name: "reset"; type: "QVariant" }
        Method { name: "update"; type: "QVariant" }
        Method {
            name: "keyEvent"
            type: "QVariant"
            Parameter { name: "key"; type: "QVariant" }
            Parameter { name: "text"; type: "QVariant" }
            Parameter { name: "modifiers"; type: "QVariant" }
        }
        Method { name: "selectionLists"; type: "QVariant" }
        Method {
            name: "selectionListItemCount"
            type: "QVariant"
            Parameter { name: "type"; type: "QVariant" }
        }
        Method {
            name: "selectionListData"
            type: "QVariant"
            Parameter { name: "type"; type: "QVariant" }
            Parameter { name: "index"; type: "QVariant" }
            Parameter { name: "role"; type: "QVariant" }
        }
        Method {
            name: "selectionListItemSelected"
            type: "QVariant"
            Parameter { name: "type"; type: "QVariant" }
            Parameter { name: "index"; type: "QVariant" }
        }
    }
    Component {
        prototype: "QtVirtualKeyboard::InputMethod"
        name: "QtQuick.VirtualKeyboard/MultitapInputMethod 1.0"
        exports: ["QtQuick.VirtualKeyboard/MultitapInputMethod 1.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        Property { name: "multitapSequence"; type: "string" }
        Property { name: "multitapIndex"; type: "int" }
        Property { name: "multiTapTimer"; type: "QVariant" }
        Method {
            name: "inputModes"
            type: "QVariant"
            Parameter { name: "locale"; type: "QVariant" }
        }
        Method {
            name: "setInputMode"
            type: "QVariant"
            Parameter { name: "locale"; type: "QVariant" }
            Parameter { name: "inputMode"; type: "QVariant" }
        }
        Method {
            name: "setTextCase"
            type: "QVariant"
            Parameter { name: "textCase"; type: "QVariant" }
        }
        Method { name: "reset"; type: "QVariant" }
        Method { name: "update"; type: "QVariant" }
        Method {
            name: "keyEvent"
            type: "QVariant"
            Parameter { name: "key"; type: "QVariant" }
            Parameter { name: "text"; type: "QVariant" }
            Parameter { name: "modifiers"; type: "QVariant" }
        }
        Method { name: "selectionLists"; type: "QVariant" }
        Method {
            name: "selectionListItemCount"
            type: "QVariant"
            Parameter { name: "type"; type: "QVariant" }
        }
        Method {
            name: "selectionListData"
            type: "QVariant"
            Parameter { name: "type"; type: "QVariant" }
            Parameter { name: "index"; type: "QVariant" }
            Parameter { name: "role"; type: "QVariant" }
        }
        Method {
            name: "selectionListItemSelected"
            type: "QVariant"
            Parameter { name: "type"; type: "QVariant" }
            Parameter { name: "index"; type: "QVariant" }
        }
    }
    Component {
        prototype: "QQuickItem"
        name: "QtQuick.VirtualKeyboard/NumberKey 1.0"
        exports: ["QtQuick.VirtualKeyboard/NumberKey 1.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "weight"; type: "double" }
        Property { name: "text"; type: "string" }
        Property { name: "displayText"; type: "string" }
        Property { name: "smallText"; type: "string" }
        Property { name: "smallTextVisible"; type: "bool" }
        Property { name: "alternativeKeys"; type: "QVariant" }
        Property { name: "effectiveAlternativeKeys"; type: "QVariant"; isReadonly: true }
        Property { name: "effectiveAlternativeKeysHighlightIndex"; type: "int"; isReadonly: true }
        Property { name: "key"; type: "int" }
        Property { name: "noKeyEvent"; type: "bool" }
        Property { name: "active"; type: "bool" }
        Property { name: "noModifier"; type: "bool" }
        Property { name: "repeat"; type: "bool" }
        Property { name: "highlighted"; type: "bool" }
        Property { name: "functionKey"; type: "bool" }
        Property { name: "showPreview"; type: "bool" }
        Property { name: "pressed"; type: "bool" }
        Property { name: "uppercased"; type: "bool" }
        Property { name: "soundEffect"; type: "QUrl"; isReadonly: true }
        Property { name: "keyPanelDelegate"; type: "QQmlComponent"; isPointer: true }
        Signal { name: "clicked" }
    }
    Component {
        prototype: "QQuickItem"
        name: "QtQuick.VirtualKeyboard/NumberKey 2.0"
        exports: ["QtQuick.VirtualKeyboard/NumberKey 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "weight"; type: "double" }
        Property { name: "text"; type: "string" }
        Property { name: "displayText"; type: "string" }
        Property { name: "smallText"; type: "string" }
        Property { name: "smallTextVisible"; type: "bool" }
        Property { name: "alternativeKeys"; type: "QVariant" }
        Property { name: "effectiveAlternativeKeys"; type: "QVariant"; isReadonly: true }
        Property { name: "effectiveAlternativeKeysHighlightIndex"; type: "int"; isReadonly: true }
        Property { name: "key"; type: "int" }
        Property { name: "noKeyEvent"; type: "bool" }
        Property { name: "active"; type: "bool" }
        Property { name: "noModifier"; type: "bool" }
        Property { name: "repeat"; type: "bool" }
        Property { name: "highlighted"; type: "bool" }
        Property { name: "functionKey"; type: "bool" }
        Property { name: "showPreview"; type: "bool" }
        Property { name: "pressed"; type: "bool" }
        Property { name: "uppercased"; type: "bool" }
        Property { name: "soundEffect"; type: "QUrl"; isReadonly: true }
        Property { name: "keyPanelDelegate"; type: "QQmlComponent"; isPointer: true }
        Signal { name: "clicked" }
    }
    Component {
        prototype: "QQuickItem"
        name: "QtQuick.VirtualKeyboard/SelectionControl 2.1"
        exports: ["QtQuick.VirtualKeyboard/SelectionControl 2.1"]
        exportMetaObjectRevisions: [1]
        isComposite: true
        defaultProperty: "data"
        Property { name: "handleIsMoving"; type: "bool" }
        Property { name: "inputContext"; type: "QVariant" }
    }
    Component {
        prototype: "QQuickItem"
        name: "QtQuick.VirtualKeyboard/ShiftKey 1.0"
        exports: ["QtQuick.VirtualKeyboard/ShiftKey 1.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "weight"; type: "double" }
        Property { name: "text"; type: "string" }
        Property { name: "displayText"; type: "string" }
        Property { name: "smallText"; type: "string" }
        Property { name: "smallTextVisible"; type: "bool" }
        Property { name: "alternativeKeys"; type: "QVariant" }
        Property { name: "effectiveAlternativeKeys"; type: "QVariant"; isReadonly: true }
        Property { name: "effectiveAlternativeKeysHighlightIndex"; type: "int"; isReadonly: true }
        Property { name: "key"; type: "int" }
        Property { name: "noKeyEvent"; type: "bool" }
        Property { name: "active"; type: "bool" }
        Property { name: "noModifier"; type: "bool" }
        Property { name: "repeat"; type: "bool" }
        Property { name: "highlighted"; type: "bool" }
        Property { name: "functionKey"; type: "bool" }
        Property { name: "showPreview"; type: "bool" }
        Property { name: "pressed"; type: "bool" }
        Property { name: "uppercased"; type: "bool" }
        Property { name: "soundEffect"; type: "QUrl"; isReadonly: true }
        Property { name: "keyPanelDelegate"; type: "QQmlComponent"; isPointer: true }
        Signal { name: "clicked" }
    }
    Component {
        prototype: "QQuickItem"
        name: "QtQuick.VirtualKeyboard/ShiftKey 2.0"
        exports: ["QtQuick.VirtualKeyboard/ShiftKey 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "weight"; type: "double" }
        Property { name: "text"; type: "string" }
        Property { name: "displayText"; type: "string" }
        Property { name: "smallText"; type: "string" }
        Property { name: "smallTextVisible"; type: "bool" }
        Property { name: "alternativeKeys"; type: "QVariant" }
        Property { name: "effectiveAlternativeKeys"; type: "QVariant"; isReadonly: true }
        Property { name: "effectiveAlternativeKeysHighlightIndex"; type: "int"; isReadonly: true }
        Property { name: "key"; type: "int" }
        Property { name: "noKeyEvent"; type: "bool" }
        Property { name: "active"; type: "bool" }
        Property { name: "noModifier"; type: "bool" }
        Property { name: "repeat"; type: "bool" }
        Property { name: "highlighted"; type: "bool" }
        Property { name: "functionKey"; type: "bool" }
        Property { name: "showPreview"; type: "bool" }
        Property { name: "pressed"; type: "bool" }
        Property { name: "uppercased"; type: "bool" }
        Property { name: "soundEffect"; type: "QUrl"; isReadonly: true }
        Property { name: "keyPanelDelegate"; type: "QQmlComponent"; isPointer: true }
        Signal { name: "clicked" }
    }
    Component {
        prototype: "QQuickItem"
        name: "QtQuick.VirtualKeyboard/SpaceKey 1.0"
        exports: ["QtQuick.VirtualKeyboard/SpaceKey 1.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "weight"; type: "double" }
        Property { name: "text"; type: "string" }
        Property { name: "displayText"; type: "string" }
        Property { name: "smallText"; type: "string" }
        Property { name: "smallTextVisible"; type: "bool" }
        Property { name: "alternativeKeys"; type: "QVariant" }
        Property { name: "effectiveAlternativeKeys"; type: "QVariant"; isReadonly: true }
        Property { name: "effectiveAlternativeKeysHighlightIndex"; type: "int"; isReadonly: true }
        Property { name: "key"; type: "int" }
        Property { name: "noKeyEvent"; type: "bool" }
        Property { name: "active"; type: "bool" }
        Property { name: "noModifier"; type: "bool" }
        Property { name: "repeat"; type: "bool" }
        Property { name: "highlighted"; type: "bool" }
        Property { name: "functionKey"; type: "bool" }
        Property { name: "showPreview"; type: "bool" }
        Property { name: "pressed"; type: "bool" }
        Property { name: "uppercased"; type: "bool" }
        Property { name: "soundEffect"; type: "QUrl"; isReadonly: true }
        Property { name: "keyPanelDelegate"; type: "QQmlComponent"; isPointer: true }
        Signal { name: "clicked" }
    }
    Component {
        prototype: "QQuickItem"
        name: "QtQuick.VirtualKeyboard/SpaceKey 2.0"
        exports: ["QtQuick.VirtualKeyboard/SpaceKey 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "weight"; type: "double" }
        Property { name: "text"; type: "string" }
        Property { name: "displayText"; type: "string" }
        Property { name: "smallText"; type: "string" }
        Property { name: "smallTextVisible"; type: "bool" }
        Property { name: "alternativeKeys"; type: "QVariant" }
        Property { name: "effectiveAlternativeKeys"; type: "QVariant"; isReadonly: true }
        Property { name: "effectiveAlternativeKeysHighlightIndex"; type: "int"; isReadonly: true }
        Property { name: "key"; type: "int" }
        Property { name: "noKeyEvent"; type: "bool" }
        Property { name: "active"; type: "bool" }
        Property { name: "noModifier"; type: "bool" }
        Property { name: "repeat"; type: "bool" }
        Property { name: "highlighted"; type: "bool" }
        Property { name: "functionKey"; type: "bool" }
        Property { name: "showPreview"; type: "bool" }
        Property { name: "pressed"; type: "bool" }
        Property { name: "uppercased"; type: "bool" }
        Property { name: "soundEffect"; type: "QUrl"; isReadonly: true }
        Property { name: "keyPanelDelegate"; type: "QQmlComponent"; isPointer: true }
        Signal { name: "clicked" }
    }
    Component {
        prototype: "QQuickItem"
        name: "QtQuick.VirtualKeyboard/SymbolModeKey 1.0"
        exports: ["QtQuick.VirtualKeyboard/SymbolModeKey 1.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "weight"; type: "double" }
        Property { name: "text"; type: "string" }
        Property { name: "displayText"; type: "string" }
        Property { name: "smallText"; type: "string" }
        Property { name: "smallTextVisible"; type: "bool" }
        Property { name: "alternativeKeys"; type: "QVariant" }
        Property { name: "effectiveAlternativeKeys"; type: "QVariant"; isReadonly: true }
        Property { name: "effectiveAlternativeKeysHighlightIndex"; type: "int"; isReadonly: true }
        Property { name: "key"; type: "int" }
        Property { name: "noKeyEvent"; type: "bool" }
        Property { name: "active"; type: "bool" }
        Property { name: "noModifier"; type: "bool" }
        Property { name: "repeat"; type: "bool" }
        Property { name: "highlighted"; type: "bool" }
        Property { name: "functionKey"; type: "bool" }
        Property { name: "showPreview"; type: "bool" }
        Property { name: "pressed"; type: "bool" }
        Property { name: "uppercased"; type: "bool" }
        Property { name: "soundEffect"; type: "QUrl"; isReadonly: true }
        Property { name: "keyPanelDelegate"; type: "QQmlComponent"; isPointer: true }
        Signal { name: "clicked" }
    }
    Component {
        prototype: "QQuickItem"
        name: "QtQuick.VirtualKeyboard/SymbolModeKey 2.0"
        exports: ["QtQuick.VirtualKeyboard/SymbolModeKey 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "weight"; type: "double" }
        Property { name: "text"; type: "string" }
        Property { name: "displayText"; type: "string" }
        Property { name: "smallText"; type: "string" }
        Property { name: "smallTextVisible"; type: "bool" }
        Property { name: "alternativeKeys"; type: "QVariant" }
        Property { name: "effectiveAlternativeKeys"; type: "QVariant"; isReadonly: true }
        Property { name: "effectiveAlternativeKeysHighlightIndex"; type: "int"; isReadonly: true }
        Property { name: "key"; type: "int" }
        Property { name: "noKeyEvent"; type: "bool" }
        Property { name: "active"; type: "bool" }
        Property { name: "noModifier"; type: "bool" }
        Property { name: "repeat"; type: "bool" }
        Property { name: "highlighted"; type: "bool" }
        Property { name: "functionKey"; type: "bool" }
        Property { name: "showPreview"; type: "bool" }
        Property { name: "pressed"; type: "bool" }
        Property { name: "uppercased"; type: "bool" }
        Property { name: "soundEffect"; type: "QUrl"; isReadonly: true }
        Property { name: "keyPanelDelegate"; type: "QQmlComponent"; isPointer: true }
        Signal { name: "clicked" }
    }
    Component {
        prototype: "QQuickMultiPointTouchArea"
        name: "QtQuick.VirtualKeyboard/TraceInputArea 2.0"
        exports: ["QtQuick.VirtualKeyboard/TraceInputArea 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "patternRecognitionMode"; type: "int" }
        Property { name: "horizontalRulers"; type: "QVariant" }
        Property { name: "verticalRulers"; type: "QVariant" }
        Property { name: "boundingBox"; type: "QRectF"; isReadonly: true }
        Property { name: "canvasType"; type: "string" }
        Property { name: "__traceCanvasList"; type: "QVariant" }
        Property { name: "__traceCaptureDeviceInfo"; type: "QVariant" }
        Property { name: "__traceScreenInfo"; type: "QVariant" }
        Method {
            name: "findTraceCanvasById"
            type: "QVariant"
            Parameter { name: "traceId"; type: "QVariant" }
        }
    }
    Component {
        prototype: "QQuickItem"
        name: "QtQuick.VirtualKeyboard/TraceInputKey 2.0"
        exports: ["QtQuick.VirtualKeyboard/TraceInputKey 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "weight"; type: "double" }
        Property { name: "patternRecognitionMode"; type: "int" }
        Property { name: "horizontalRulers"; type: "QVariant" }
        Property { name: "verticalRulers"; type: "QVariant" }
        Property { name: "boundingBox"; type: "QRectF"; isReadonly: true }
        Property { name: "canvasType"; type: "string" }
    }
    Component {
        prototype: "QQuickListView"
        name: "QtQuick.VirtualKeyboard/WordCandidatePopupList 2.0"
        exports: ["QtQuick.VirtualKeyboard/WordCandidatePopupList 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "maxVisibleItems"; type: "int" }
        Property { name: "preferredVisibleItems"; type: "int"; isReadonly: true }
        Property { name: "contentWidth"; type: "double"; isReadonly: true }
        Property { name: "flipVertical"; type: "bool"; isReadonly: true }
    }
}
